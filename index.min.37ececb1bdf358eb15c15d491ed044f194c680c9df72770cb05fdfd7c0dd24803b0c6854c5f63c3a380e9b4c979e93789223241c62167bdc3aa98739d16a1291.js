var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch({preset:'score',cache:!0,doc:{id:'id',field:['title','description','content'],store:['href','title','description']}}),c=[{id:0,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/components/variable-catalog/",title:"Variable Catalog",description:"The variable catalog let us to define variable names ( and its default values if not redefined before) to use on STRINGEVAL metric types, These variables could be redefined on each device maintaining the metric formula definition across devices.",content:'\u003ch2 id="view"\u003eView\u003c/h2\u003e\n\u003cp\u003eAvailable Variables are shown as table. This will appear every time you navigate from menu.\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/variable-catalog/images/variable_catalog_edit.JPG"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/variable-catalog/images/variable_catalog_edit_hu1d6e9a85264afb4fb71d0c8b3e4a7d01_30373_600x400_fit_q75_box.JPG"\n         width="600" height="341"\n         alt="" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch2 id="addedit-variables-to-the-catalog"\u003eAdd/Edit Variables to the catalog\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAdd\u003c/strong\u003e: In the catalog list click on new button \u003cimg src="images/new_button.JPG" alt="New Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEdit\u003c/strong\u003e: In the catalog list click the edit\u0026rsquo;s button \u003cimg src="images/edit_button.JPG" alt="Edit Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Create/Modify form will show up:\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/variable-catalog/images/variable_catalog_edit.JPG"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/variable-catalog/images/variable_catalog_edit_hu1d6e9a85264afb4fb71d0c8b3e4a7d01_30373_600x400_fit_q75_box.JPG"\n         width="600" height="341"\n         alt="Edit variables" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eEdit variables\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch3 id="configuration-parameters"\u003eConfiguration Parameters\u003c/h3\u003e\n\u003cp\u003eThese are the following parameters, that let you create an usable Variable\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType of settings\u003c/th\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eVariable settings\u003c/td\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003eText String that uniquely identify the variable ( and will be placed on STRINGEVAL formulas)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003etype\u003c/td\u003e\n\u003ctd\u003eThe type of the variable ( STRINGEVAL could be used to generate numbers as well as strings, as the evaluation engine let us a lot of expresions see !  \u003ca href="https://github.com/Knetic/govaluate/blob/master/MANUAL.md"\u003eEVALUATION MANUAL\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eValue\u003c/td\u003e\n\u003ctd\u003eThe default value if not redefined elsewhere\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExtra settings\u003c/td\u003e\n\u003ctd\u003eDescription\u003c/td\u003e\n\u003ctd\u003eSome useful description to administrators\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="variable-redefinition"\u003eVariable Redefinition\u003c/h3\u003e\n\u003cp\u003eAll variables could be redefined on the host definition as \u0026ldquo;Device Variables\u0026rdquo; with its custom value , if not redefined but used on any of the measurements defined in the device the default value will be taken.\u003c/p\u003e\n\u003ch3 id="multi-edit-in-variable-catalog"\u003eMulti edit in Variable Catalog\u003c/h3\u003e\n\u003cp\u003eMulti edit has 2 options: Remove and Change property\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eRemove: Allows to remove all the selected items\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChange property: Allows to change the selected property of all the selected items. The properties are the same defined in the configuration.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eProperty\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eOptions/Values\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eType\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eType of the new variable\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eValue\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eValue of the new variable\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n'},{id:1,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/components/influx-servers/",title:"InfluxDB Servers",description:"Defined InfluxDB Servers where collected metrics are stored.",content:'\u003ch2 id="view"\u003eView\u003c/h2\u003e\n\u003cp\u003eConfigured Influx Servers are shown as table. This will appear every time you navigate from menu.\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/influx-servers/images/config_influx_servers_list.jpg"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/influx-servers/images/config_influx_servers_list_hu82e3f6c6c97ebdb26a2e898e120058c6_36288_600x400_fit_q75_box.jpg"\n         width="600" height="97"\n         alt="influx servers list" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003einflux servers list\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch2 id="addedit-influxdb-output-databases"\u003eAdd/Edit InfluxDB output databases\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAdd\u003c/strong\u003e: In the InfluxDB Servers list click on new button \u003cimg src="images/new_button.JPG" alt="New Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEdit\u003c/strong\u003e: Click on InfluxDB edit\u0026rsquo;s button \u003cimg src="images/edit_button.JPG" alt="Edit Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Create/Modify form will show up:\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/influx-servers/images/config_influx_servers_edit.jpg"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/influx-servers/images/config_influx_servers_edit_hue0bf08791cb000fad2621cb3473e381e_53462_600x400_fit_q75_box.jpg"\n         width="379" height="400"\n         alt="New button" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eNew button\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch3 id="configuration-parameters"\u003eConfiguration Parameters\u003c/h3\u003e\n\u003cp\u003eThese are the following parameters, that let you create an HTTP based InfluxDB Connection\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType of Settings\u003c/th\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eServer settings\u003c/td\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003eText String that uniquely identify the influxdb connection\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eHost\u003c/td\u003e\n\u003ctd\u003eThe hostname/IP to connect\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ePort\u003c/td\u003e\n\u003ctd\u003eThe port to connect\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eTimeout\u003c/td\u003e\n\u003ctd\u003eConnection timeout\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDatabase settings\u003c/td\u003e\n\u003ctd\u003eDB\u003c/td\u003e\n\u003ctd\u003eInfluxDB database\u0026rsquo;s Name\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eUser\u003c/td\u003e\n\u003ctd\u003eUsername with \u003ccode\u003eWRITE\u003c/code\u003e privileges on selected InfluxDB database\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ePassword\u003c/td\u003e\n\u003ctd\u003ePassword of related User\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eRetention Policy\u003c/td\u003e\n\u003ctd\u003eDatabase retention policy name\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eTimestamp Precision\u003c/td\u003e\n\u003ctd\u003eTime units of the Timestamp\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExtra settings\u003c/td\u003e\n\u003ctd\u003eUser Agent\u003c/td\u003e\n\u003ctd\u003eHTTP user agent sent to the database backend ( useful to debug input data from de backend view), if not set the agent will send as user agent \u003cem\u003esnmpCollector-\u003ccode\u003e\u0026lt;InstanceID\u0026gt;\u003c/code\u003e\u003c/em\u003e (from the [general] config.toml section)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eDescription\u003c/td\u003e\n\u003ctd\u003eSome useful description to administrators\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="dummy-server"\u003eDummy Server\u003c/h3\u003e\n\u003cp\u003eUntil the user doesn\u0026rsquo;t set up any database, an internal \u003ccode\u003edummy server\u003c/code\u003e is created to send data from all gathered devices discarding data at the end of poll.\u003c/p\u003e\n\u003ch3 id="the-default-server"\u003eThe \u0026ldquo;default\u0026rdquo; Server\u003c/h3\u003e\n\u003cp\u003eSnmpCollector is able to send its own stats to InfluxDB: it will look for an InfluxDB Server named \u0026ldquo;default\u0026rdquo; to use as output backend, if it doesn\u0026rsquo;t exist It will send over the \u003ccode\u003eDummy Server\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e(Pending define default and dummy influxservers)\u003c/p\u003e\n\u003ch3 id="multi-edit-in-influx-servers"\u003eMulti edit in Influx Servers\u003c/h3\u003e\n\u003cp\u003eMulti edit has 2 options: Remove and Change property\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eRemove: Allows to remove all the selected items\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChange property: Allows to change the selected property of all the selected items. The properties are the same defined in the configuration.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eProperty\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eOptions/Values\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ePrecision\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003eh,m,s,ms,u,ns\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRetention\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eRetention policy name\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTimeout\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003e\u0026ldquo;X\u0026rdquo; s\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n'},{id:2,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/components/oid-conditions/",title:"OID Conditions",description:"This component allows the user define some conditions based on OID query and rules. Those Conditions can be used on `SNMP Metrics` to create counters and to create `Measurement Filters`",content:'\u003ch2 id="view"\u003eView\u003c/h2\u003e\n\u003cp\u003eConfigured \u003cstrong\u003eOID Conditions\u003c/strong\u003e are shown as table. This will appear every time you navigate from menu.\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/oid-conditions/images/config_oid_conditions_list.JPG"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/oid-conditions/images/config_oid_conditions_list_hu82bd64d1bf55143c2d3098751e5fafe9_63114_600x400_fit_q75_box.JPG"\n         width="600" height="178"\n         alt="" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch2 id="addedit-oid-conditions"\u003eAdd/Edit OID Conditions\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAdd\u003c/strong\u003e: In the OID Conditions list click on new button \u003cimg src="images/new_button.JPG" alt="New Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEdit\u003c/strong\u003e: Click on OID Condition edit\u0026rsquo;s button \u003cimg src="images/edit_button.JPG" alt="Edit Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Create/Modify form will show up:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="images/config_oid_conditions_edit.jpg" alt="Edit/Modify OID Conditions"\u003e\u003c/p\u003e\n\u003ch3 id="configuration-parameters"\u003eConfiguration Parameters\u003c/h3\u003e\n\u003cp\u003eThese are the following parameters that allow you to create an OID Condition to be applied as Measurement Filter on Measurement definitions\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: on 0.8.1+, the \u003ccode\u003ematch\u003c/code\u003e condition works with all SNMP types. Prior to 0.8.1 only works on \u003ccode\u003eOctetString\u003c/code\u003e SNMP type results\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType of settings\u003c/th\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eBasic settings\u003c/td\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003eText String that uniquely identify the OIDCondition\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eIsMultiple\u003c/td\u003e\n\u003ctd\u003eSelect if the OID must apply multiple or not: \u003cul\u003e\u003cli\u003e \u003ccode\u003etrue\u003c/code\u003e: apply logical syntax with existing OIDs Conditions \u003c/li\u003e \u003cli\u003e \u003ccode\u003efalse\u003c/code\u003e: apply the set condition on OID query\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOID Condition settings\u003c/td\u003e\n\u003ctd\u003eOID/OID Condition\u003c/td\u003e\n\u003ctd\u003eDepending on isMultiple value: \u003cul\u003e\u003cli\u003eBase OID to get data from\u003c/li\u003e\u003cli\u003eLogical syntax using existing OID Conditions\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eCondition Type\u003c/td\u003e\n\u003ctd\u003e(Only applied on \u003ccode\u003eMultiple: false\u003c/code\u003e) All possible conditions \u003cbr/\u003e\u003cbr/\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eneq\u003c/strong\u003e: returns true if value is equal (number evaluation)\u003c/li\u003e\u003cli\u003e\u003cstrong\u003enin\u003c/strong\u003e: returns true if values separated by comma are equal (multiple number evaluation)\u003c/li\u003e\u003cli\u003e\u003cstrong\u003enlt\u003c/strong\u003e:returns true if value is less than (number evaluation)\u003c/li\u003e\u003cli\u003e\u003cstrong\u003engt\u003c/strong\u003e:returns true if value is greather than (number evaluation)\u003c/li\u003e\u003cli\u003e\u003cstrong\u003enge\u003c/strong\u003e:returns true if value is greater or equal than (number evaluation)\u003c/li\u003e\u003cli\u003e\u003cstrong\u003enle\u003c/strong\u003e:returns true if value is less or equal  (number evaluation)\u003c/li\u003e\u003cli\u003e\u003cstrong\u003ematch\u003c/strong\u003e:returns true if value match (regex string evaluation)\u003c/li\u003e\u003cli\u003e\u003cstrong\u003enomatch\u003c/strong\u003e:returns true if value not match (regex string evaluation)\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eCondition Value\u003c/td\u003e\n\u003ctd\u003ethe number or regex will apply to filter result from queried SNMP OID\u0026rsquo;s\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExtra settings\u003c/td\u003e\n\u003ctd\u003eDescription\u003c/td\u003e\n\u003ctd\u003eSome useful description to administrators\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="multi-edit-in-oid-conditions"\u003eMulti edit in OID Conditions\u003c/h3\u003e\n\u003cp\u003eMulti edit has 1 option: Remove\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRemove: Allows to remove all the selected items\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id="examples"\u003eExamples:\u003c/h2\u003e\n\u003ch3 id="a-creating-new-multiple-oid-condition"\u003eA. Creating new Multiple OID Condition\u003c/h3\u003e\n\u003cp\u003eLets filter all interfaces that are UP and are Ethernet like:\u003c/p\u003e\n\u003ch4 id="a1-add-single-oid-conditions-the-result-must-be-like"\u003eA.1 Add single OID Conditions, the result must be like:\u003c/h4\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eIs Multiple\u003c/th\u003e\n\u003cth\u003eOIDCond\u003c/th\u003e\n\u003cth\u003eCondType\u003c/th\u003e\n\u003cth\u003eCondValue\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003econd_if_status_up\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.2.2.1.8\u003c/td\u003e\n\u003ctd\u003eneq\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003econd_if_name_match_eth\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.1\u003c/td\u003e\n\u003ctd\u003ematch\u003c/td\u003e\n\u003ctd\u003eeth.*\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id="a2-add-a-oid-condition-with-ismultiple--true"\u003eA.2 Add a OID Condition with \u003ccode\u003eIsMultiple = true\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eNow the \u003ccode\u003eOID Condition\u003c/code\u003e field must be filled with a logical expression that uses already defined conditions:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eIs Multiple\u003c/th\u003e\n\u003cth\u003eOIDCond\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003econd_if_status_if_eth\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003ctd\u003econd_if_name_match_eth \u0026amp;\u0026amp; cond_if_status_up\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id="a3-result"\u003eA.3 Result\u003c/h4\u003e\n\u003cp\u003eThe OID Condition list must be like:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eIs Multiple\u003c/th\u003e\n\u003cth\u003eOIDCond\u003c/th\u003e\n\u003cth\u003eCondType\u003c/th\u003e\n\u003cth\u003eCondValue\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003econd_if_status_up\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.2.2.1.8\u003c/td\u003e\n\u003ctd\u003eneq\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003econd_if_name_match_eth\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.1\u003c/td\u003e\n\u003ctd\u003ematch\u003c/td\u003e\n\u003ctd\u003eeth.*\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003econd_if_status_if_eth\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003ctd\u003econd_if_name_match_eth \u0026amp;\u0026amp; cond_if_status_up\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n'},{id:3,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/components/snmp-metrics/",title:"SNMP Metrics",description:"This component allows the user define core metrics to be collected from the device.",content:'\u003ch2 id="view"\u003eView\u003c/h2\u003e\n\u003cp\u003eConfigured \u003cstrong\u003eSNMP Metrics\u003c/strong\u003e are shown as table. This will appear every time you navigate from menu.\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/snmp-metrics/images/config_snmp_metrics_list.jpg"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/snmp-metrics/images/config_snmp_metrics_list_hub6549057966fefb9fed083126c7aa190_182033_600x400_fit_q75_box.jpg"\n         width="600" height="394"\n         alt="SNMP Metric List" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eSNMP Metric List\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch2 id="addedit-snmp-metrics"\u003eAdd/Edit SNMP Metrics\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAdd\u003c/strong\u003e: In the SNMP Metrics list click on new button \u003cimg src="/images/new_button.JPG" alt="New Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEdit\u003c/strong\u003e: Click on SNMP Metric edit\u0026rsquo;s button \u003cimg src="/images/edit_button.JPG" alt="Edit Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Create/Modify form will show up:\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/snmp-metrics/images/config_snmp_metrics_edit.jpg"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/snmp-metrics/images/config_snmp_metrics_edit_hu77b98c891206eb9264212256389120a5_57963_600x400_fit_q75_box.jpg"\n         width="387" height="400"\n         alt="Create/Modify SNMP Metrics" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eCreate/Modify SNMP Metrics\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch3 id="configuration-parameters"\u003eConfiguration Parameters\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType of settings\u003c/th\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eCore settings\u003c/td\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003eText String that uniquely identify the metric recommended use the MIB Name, should be unique in the database\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eFieldName\u003c/td\u003e\n\u003ctd\u003eSet the \u0026ldquo;field\u0026rdquo; name inside a Influx measurement, could be the same of id or not, should be unique inside the measurement where the metric will be sent.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMetric settings\u003c/td\u003e\n\u003ctd\u003eDataSrcType\u003c/td\u003e\n\u003ctd\u003eOrigin data type could be one of these:\u003cbr/\u003e\u003cul\u003e\u003cli\u003e(SNMP SMI Type) INTEGER\u003c/li\u003e\u003cli\u003e(SNMP SMI Type) Integer32 \u003c/li\u003e\u003cli\u003e(SNMP SMI Type) Gauge32\u003c/li\u003e\u003cli\u003e(SNMP SMI Type) UInteger32\u003c/li\u003e\u003cli\u003e(SNMP SMI Type) Unsigned32\u003c/li\u003e\u003cli\u003e(SNMP SMI Type) Counter32 \u003c/li\u003e\u003cli\u003e(SNMP SMI Type) Counter64 \u003c/li\u003e\u003cli\u003e(SNMP SMI Type) TimeTicks\u003c/li\u003e\u003cli\u003e(SNMP SMI Type) OCTETSTRING\u003c/li\u003e\u003cli\u003e(SNMP SMI Type) IpAddress\u003c/li\u003e\u003cli\u003e(Cooked type) TIMETICKS [Compute TimeTicks to seconds]\u003c/li\u003e\u003cli\u003e(SNMP SMI Type) BIT STRING (needs a named-number enumeration in extradata) \u003c/li\u003e\u003cli\u003e(Cooked type) COUNTER32 [Compute increments for 32 bit counters]\u003c/li\u003e\u003cli\u003e(Cooked type) COUNTER64 [Compute increments for 64 bit counters]\u003c/li\u003e\u003cli\u003e(Cooked type) COUNTERXX [Compute increments only if it really increments \u0026ndash; as NON_NEGATIVE_DERIVATIVE does\u0026ndash;]\u003c/li\u003e\u003cli\u003e(Cooked type) HWADDR [ Translate Hardware Address (MAC) from STRING]\u003c/li\u003e\u003cli\u003e(Cooked type) STRINGPARSER [ Compute values from Regex ]\u003c/li\u003e\u003cli\u003e(Cooked type) STRINGEVAL [evaluate data from other metrics]\u003c/li\u003e\u003cli\u003e(Cooked type) CONDITIONEVAL [evaluate OID table with boolean conditions and get number of true values]\u003c/li\u003e\u003cli\u003e(Cooked type) BIT STRING CHECK [needs the number bit to check in extradata , returns 1 or 0]\u003c/li\u003e\u003cli\u003e(Cooked type) ENUM - [needs named-number enumeration on extradata]\u003c/li\u003e\u003cli\u003e(Cooked type) MULTI-STRINGPARSER  [generates multiple fields or tags from an snmp returned string and an Regular expression with multiple capturing groups]\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eIsTag\u003c/td\u003e\n\u003ctd\u003eIf true data will be sent as a Influxdb \u0026ldquo;TAG\u0026rdquo;. (default is false)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eBaseOID\u003c/td\u003e\n\u003ctd\u003eSnmp OID for this metric ( could be the base OID when it belongs to a snmp indexed table), could not be set only if datasrctype is of type \u0026ldquo;String Eval\u0026rdquo;.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eExtraData\u003c/td\u003e\n\u003ctd\u003edata needed to special data types as String Eval(evaluated expression needed), String Parser(regex needed) or OctetString to add a trim function (0.8.2+)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eGetRate\u003c/td\u003e\n\u003ctd\u003eOnly useful on  COUNTER64/32/XX types , if true value sent will be the computed difference and after divided by the number of elapsed seconds between snmp calls\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eConversion\u003c/td\u003e\n\u003ctd\u003ebefore 0.8.0 version all data was sent as FLOAT64 numbers, from new 0.8.0 version could select output format depending on the DataSrcType, usually FLOAT ( float64 ) , INTEGER (int64) , BOOLEAN or STRING. Not all conversions all available on all input datasources. Unsigned Integer conversion not supported yet.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMetric autoscale\u003c/td\u003e\n\u003ctd\u003eScale\u003c/td\u003e\n\u003ctd\u003eif set (as a floating point value) computed data will be scaled before sent.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eShift\u003c/td\u003e\n\u003ctd\u003eif set (as a floating point value) computed data will be shifted before sent.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExtra settings\u003c/td\u003e\n\u003ctd\u003eDescription\u003c/td\u003e\n\u003ctd\u003eany useful discretion to understand data gathered for this metric ( recommended place here units of the measurement).\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eNotes\u003c/strong\u003e\u003c/em\u003e:\nThe SnmpCollector Metric engine computes all its data and sent them as floating point values to the database, except for tags that will be sent as text strings\u003c/p\u003e\n\u003ch3 id="multi-edit-in-snmp-metrics"\u003eMulti edit in SNMP Metrics\u003c/h3\u003e\n\u003cp\u003eMulti edit has 2 options: Remove and Change property\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eRemove: Allows to remove all the selected items\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChange property: Allows to change the selected property of all the selected items. The properties are the same defined in the configuration.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eProperty\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eOptions/Values\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eDataSrcType\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003e\u003cli\u003eInt,Int32,Gauge32,UInt32,Unsigned32,Counter32,Counter64\u003c/li\u003e\u003cli\u003eTimeTicks, OCTETSTRING, IpAddress\u003c/li\u003e\u003cli\u003eCOUNTER32, COUNTER64, COUNTERXX\u003c/li\u003e\u003cli\u003eHWADDR, STRINGPARSER,STRINGEVAL, CONDITIONEVAL\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eScale\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eAny number\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eShift\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eAny number\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIsTag\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003eTrue / False\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cimg width=50/\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cimg width=50/\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cimg width=50/\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id="about-octetstringhex-string"\u003eAbout OCTETSTRING/Hex-String\u003c/h2\u003e\n\u003cp\u003eFrom 0.8.0 version, you could use OCTETSTRING as datasource Types for Integers codified as Hex-String, in this case you should enable conversion to INTEGER.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf updated from release \u0026lt; 0.8.0 to  release \u0026gt;= 0.8.0 version you should do a manual upgrade of your database `update snmp_metric_cfg set Conversion=3 where datasrctype=\u0026lsquo;OCTETSTRING\u0026rsquo;; if not done any OCTETSTRING data won\u0026rsquo;t be collected.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFrom 0.8.2 version, it is possible to apply trim functions on octet-string metric based on \u003ccode\u003eExtraData\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eAvailable options:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etrimright(\u0026lsquo;xyz\u0026rsquo;): removes trailing characters defined by \u0026lsquo;xyz\u0026rsquo;\u003c/li\u003e\n\u003cli\u003etrimleft(\u0026lsquo;xyz\u0026rsquo;): removes leading characters defined by \u0026lsquo;xyz\u0026rsquo;\u003c/li\u003e\n\u003cli\u003etrim(\u0026lsquo;xyz\u0026rsquo;): removes trailing and leading characters defined by \u0026lsquo;xyz\u0026rsquo;\u003c/li\u003e\n\u003cli\u003etrimspace : remove all leading and trailing tabs, whitespaces, newlines and return carriage this is (\\t \\n\\r)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eOID \u0026gt; .1.2.3.4.5\n\n.1.2.3.4.5.1 = \u0026quot;   Test string with blank spaces   \u0026quot;\n\nExtraData: trimspace\n\nOutput:\n.1.2.3.4.5.1 = \u0026quot;Test string with blank spaces\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="about-bit-string-and-bit-string-check-metric-type"\u003eAbout BIT STRING and BIT STRING CHECK Metric Type\u003c/h2\u003e\n\u003cp\u003eFrom 0.7.2 version , there is the way to get data from BIT STRING OID\u0026rsquo;s.  BITS is a pseudo data type that specifies a collection of labelled bits as explained here !(https://www.webnms.com/snmp/help/snmpapi/snmpv3/using_mibs_in_applns/bits_datatype.html)\u003c/p\u003e\n\u003cp\u003eIf you want config a BIT STRING you should also provide the bit-\u0026gt;label comma separated array, in the ExtraData Field.\u003c/p\u003e\n\u003cp\u003eBy example:\u003ccode\u003esunday(0), monday(1), tuesday(2), wednesday(3), thursday(4), friday(5), saturday(6)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eif data got on the snmpquery is this bitstring , The output will be an concatenated labeled array sent as and string to the influxDB.\nExamples:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eSnmp query Out\u003c/th\u003e\n\u003cth\u003evalue sent\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u0026lsquo;011001B\u0026rsquo;\u003c/td\u003e\n\u003ctd\u003e\u0026ldquo;monday,tuesday,saturday\u0026rdquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u0026lsquo;100001B\u0026rsquo;\u003c/td\u003e\n\u003ctd\u003e\u0026ldquo;sunday,saturday\u0026rdquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u0026lsquo;010000B\u0026rsquo;\u003c/td\u003e\n\u003ctd\u003e\u0026ldquo;monday\u0026rdquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u0026lsquo;01B\u0026rsquo;\u003c/td\u003e\n\u003ctd\u003e\u0026ldquo;monday\u0026rdquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eIf we would like to know only if certain bit has been check  we can use the Cooked Type BIT STRING CHECK \u0026ldquo;BITSCHECK\u0026rdquo;. Suppose you can get with a BIT STRING the state of one device and the bit,label map is\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ebit number\u003c/th\u003e\n\u003cth\u003elabel\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eup\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003edown\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003erestoring\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003efailed\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eYou can check if the device is ok by only check that the byte \u0026ldquo;0\u0026rdquo; is set ( the device will be up) , in this case the metric will send 1  floating point number if the selected byte is set or 0 if not.\u003c/p\u003e\n\u003ch2 id="about-enum-metric-type"\u003eAbout ENUM Metric Type\u003c/h2\u003e\n\u003cp\u003eFrom 0.7.7 version , there is the way to map enum\nvalues and send it to InfluxDB as STRING (as Tag or Field). The enum-named values can be defined on the ExtraData field with the following syntax:\n\u003ccode\u003e\u0026lt;CUSTOM_DESCRIPTION\u0026gt;(\u0026lt;ENUM\u0026gt;)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eIf a returned value by the OID query is not mapped on the extradata, the value will be sent directly as a STRING.\u003c/p\u003e\n\u003cp\u003eBy example, the following OID query \u003ccode\u003eifType OID - 1.3.6.1.2.1.2.2.1.3\u003c/code\u003e would return the type of interfaces. The ENUM metric Type would allow the user to map those results and add custom text to clarify its meaning:\u003c/p\u003e\n\u003cp\u003eWith the following Metric:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSNMP possible results: 6,24,135\n\nBase OID : 1.3.6.1.2.1.2.2.1.3\nExtraData: EthernetLike interfaces (6), SubInterfaces L2VLAN (135)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWould generate the following output to InfluxDB:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eSnmp query Out\u003c/th\u003e\n\u003cth\u003eExtraData\u003c/th\u003e\n\u003cth\u003evalue  sent\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003eEthernetLike interfaces (6)\u003c/td\u003e\n\u003ctd\u003e\u0026ldquo;EthernetLike interfaces (6)\u0026rdquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e24\u003c/td\u003e\n\u003ctd\u003e(non mapped)\u003c/td\u003e\n\u003ctd\u003e\u0026ldquo;24\u0026rdquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e135\u003c/td\u003e\n\u003ctd\u003eSubInterfaces L2VLAN (135)\u003c/td\u003e\n\u003ctd\u003e\u0026ldquo;SubInterfaces L2VLAN (135)\u0026rdquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id="about-multistringparser-metrics"\u003eAbout MULTISTRINGPARSER Metrics\u003c/h2\u003e\n\u003cp\u003eFrom 0.7.6 version , there is  a new metric type and the first capable to generate more than one field/tag with only one metric definition.\nWill parse data with regex with capturing groups and each capture group will be attached to a definition  ITEM, each definition ITEM will generate a Field or a Tag. We assume that the origin got data from devices are readable strings.\u003c/p\u003e\n\u003cp\u003eConfiguration will be placed in:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFieldName:\u003c/strong\u003e Comma separated value of ITEM definitions\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExtraData:\u003c/strong\u003e Regular expression with multiple capturing groups\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eby example:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFieldName:\u003c/strong\u003e \u003ccode\u003eF|field_name_1|CONV1,F|field_name_2|CONV2,T|tag_name1|CONV3\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExtraData:\u003c/strong\u003e \u003ccode\u003e\'([^;]*);([^;]*);([^;]*);\' \u0026lt;-regexp\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIs necessary configure as many ITEMS as capturing groups.\u003c/p\u003e\n\u003cp\u003eEach ITEM  in  the FieldName needs for 3 parameters before to be sent.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eTYPE|NAME|CONVERSION\u003c/code\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003econfiguration\u003c/th\u003e\n\u003cth\u003ewhat means\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eTYPE\u003c/td\u003e\n\u003ctd\u003eF = Field , T = Tag ( this parameter invalidates the use of isTag flag in the metric definition)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eNAME\u003c/td\u003e\n\u003ctd\u003eField/Tag Name will be sent to the InfluxDB\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCONVERSION\u003c/td\u003e\n\u003ctd\u003ehow should evaluate the returned string? possible values (STR,INT,FP,BL)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eFields/Tag definitions will be evaluated as:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eCONVERSORS\u003c/th\u003e\n\u003cth\u003eConversion type (from String)\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSTR\u003c/td\u003e\n\u003ctd\u003eto maintain as string ( no conversion will be done)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eINT\u003c/td\u003e\n\u003ctd\u003eto convert as and 64bits integer\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFP\u003c/td\u003e\n\u003ctd\u003eto convert as and 64 bits floating point\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBL\u003c/td\u003e\n\u003ctd\u003eto convert as a boolean\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id="about-stringeval-metrics"\u003eAbout STRINGEVAL Metrics\u003c/h2\u003e\n\u003cp\u003eThe StringEval Metric type let us compute any value from an \u0026ldquo;expression evaluation\u0026rdquo; , the expression could be mathematical or logical. Available documentation  on what kind of evaluations could snmpcollector do could be read here \u003ca href="https://github.com/Knetic/govaluate/blob/master/MANUAL.md"\u003eEXPRESSION TUTORIAL\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImportant defining \u003ccode\u003eFieldNames\u003c/code\u003e that contains characters like [0-9], [-], or something else, needs to be escaped using brackets on the formula. Example: [1m_ifHCInOctets] * [ifHighSpeed]\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id="usable-variables"\u003eUsable Variables\u003c/h3\u003e\n\u003cp\u003eWhat variables could I use on  my expressions?, Here the variables\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eVariable\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eFieldNames\u003c/td\u003e\n\u003ctd\u003eAny of the fieldNames placed on the same measurement\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eNF\u003c/td\u003e\n\u003ctd\u003eespecial variable that could be used to get the \u0026ldquo;number of fields\u0026rdquo; in the measurement (as in AWK)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eNR\u003c/td\u003e\n\u003ctd\u003eespecial variable that could be used to get the \u0026ldquo;number of rows\u0026rdquo; in the measurement (after all filters has been applied), on scalar/value measurements, NR will be always 1 . On tabular/Indexed measurements NR will be the current number of rows (after filters applied)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eNFR(\u0026gt;0.7.6)\u003c/td\u003e\n\u003ctd\u003eespecial variable  that could be used to get the\u0026quot;non filtered rows\u0026quot;, that counts the \u0026ldquo;number of rows\u0026rdquo; as the below NR but before all filters has been applied.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCatalog Vars( \u0026gt; 0.7.5)\u003c/td\u003e\n\u003ctd\u003eAny of the defined variables in the catalog\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="about-check"\u003eAbout Check\u003c/h3\u003e\n\u003cp\u003eWhen defining a new STRINGEVAL metric, the formula in extra data is stored on the configuration database but not evaluated yet since it needs to be placed into a measurement to check if expression its ok (validating all variables used in the expression are in the before table\u003c/p\u003e\n\u003ch2 id="examples"\u003eExamples\u003c/h2\u003e\n\u003ch3 id="acreating-new-stringeval-metric"\u003eA.Creating new StringEval Metric\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s create a SNMP Metric that computes the \u003ccode\u003eTotalOctets\u003c/code\u003e on each port. The formula follows as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eTotalOctets = (InBytes + OutBytes)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="a1-add-needed-metrics-to-get-our-new-string-eval-metric"\u003eA.1 Add needed metrics to get our new string eval metric:\u003c/h4\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eFieldName\u003c/th\u003e\n\u003cth\u003eBaseOID\u003c/th\u003e\n\u003cth\u003eDataSrcType\u003c/th\u003e\n\u003cth\u003eExtraData\u003c/th\u003e\n\u003cth\u003eGetRate\u003c/th\u003e\n\u003cth\u003eScale\u003c/th\u003e\n\u003cth\u003eShift\u003c/th\u003e\n\u003cth\u003eIsTag\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eifHCInOctets\u003c/td\u003e\n\u003ctd\u003eInBytes\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.6\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eifHCOutOctets\u003c/td\u003e\n\u003ctd\u003eOutBytes\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.10\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cimg width=25/\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cimg width=50/\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cimg width=50/\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cimg width=50/\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cimg width=50/\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cimg width=50/\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id="a2-add-totaloctets-metric"\u003eA.2 Add \u003ccode\u003eTotalOctets\u003c/code\u003e metric:\u003c/h4\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eFieldName\u003c/th\u003e\n\u003cth\u003eBaseOID\u003c/th\u003e\n\u003cth\u003eDataSrcType\u003c/th\u003e\n\u003cth\u003eExtraData\u003c/th\u003e\n\u003cth\u003eGetRate\u003c/th\u003e\n\u003cth\u003eScale\u003c/th\u003e\n\u003cth\u003eShift\u003c/th\u003e\n\u003cth\u003eIsTag\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eTotalOctets\u003c/td\u003e\n\u003ctd\u003eTotalOctets\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eSTRINGEVAL\u003c/td\u003e\n\u003ctd\u003eifHCInOctets + ifHCOutOctets\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id="a3-result"\u003eA.3 Result\u003c/h4\u003e\n\u003cp\u003eThe SNMP Metric list must be like:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eFieldName\u003c/th\u003e\n\u003cth\u003eBaseOID\u003c/th\u003e\n\u003cth\u003eDataSrcType\u003c/th\u003e\n\u003cth\u003eExtraData\u003c/th\u003e\n\u003cth\u003eGetRate\u003c/th\u003e\n\u003cth\u003eScale\u003c/th\u003e\n\u003cth\u003eShift\u003c/th\u003e\n\u003cth\u003eIsTag\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eifHCInOctets\u003c/td\u003e\n\u003ctd\u003eInBytes\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.6\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eifHCOutOctets\u003c/td\u003e\n\u003ctd\u003eOutBytes\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.10\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTotalOctets\u003c/td\u003e\n\u003ctd\u003eTotalOctets\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eSTRINGEVAL\u003c/td\u003e\n\u003ctd\u003eInBytes + OutBytes\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="b-creating-new-stringparser-metric"\u003eB. Creating new StringParser Metric\u003c/h3\u003e\n\u003cp\u003eSome OIDs results are full strings that contains on some part of its texts the value that we wants to capture.\nIn this example we will work with an Infoblox device and the following OID that gives us Fan1 RPM: \u003ccode\u003e.1.3.6.1.4.1.7779.3.1.1.2.1.10.1.3.28\u003c/code\u003e, with an output as: \u003ccode\u003eFAN 1: 8725 RPM\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id="b1-define-the-regex-that-would-capture-the-group"\u003eB.1 Define the regex that would capture the group:\u003c/h4\u003e\n\u003cp\u003eWe need to capture the RPM speed, so we define the capture group as: \u003ccode\u003e.*: *([0-9]*)* *RPM\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id="b2-add-new-stringparser-metric"\u003eB.2 Add new StringParser metric\u003c/h4\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eFieldName\u003c/th\u003e\n\u003cth\u003eBaseOID\u003c/th\u003e\n\u003cth\u003eDataSrcType\u003c/th\u003e\n\u003cth\u003eExtraData\u003c/th\u003e\n\u003cth\u003eGetRate\u003c/th\u003e\n\u003cth\u003eScale\u003c/th\u003e\n\u003cth\u003eShift\u003c/th\u003e\n\u003cth\u003eIsTag\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eInfoblox_FanState1\u003c/td\u003e\n\u003ctd\u003efanState1\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eSTRINGPARSER\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e.*: *([0-9]*)* *RPM\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n'},{id:4,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/",title:"Measurements",description:"[Measurements](https://docs.influxdata.com/influxdb/v1.1/concepts/glossary/#measurement) are the basic Influxdb structure let us group series of the  same type/origin.",content:'\u003c!-- Images references --\u003e\n\u003c!-- https://github.com/toni-moreno/snmpcollector/blob/ --\u003e\n\u003ch1 id="measurements"\u003eMeasurements\u003c/h1\u003e\n\u003cp\u003eWhen data are gathered from  SNMP devices we can group them together as we wish when snmp data are scalar objects but is mandatory  group snmp tabular objects in the same measurement.\u003c/p\u003e\n\u003ch2 id="view"\u003eView\u003c/h2\u003e\n\u003cp\u003eConfigured \u003cstrong\u003eMeasurements\u003c/strong\u003e are shown as table. This will appear every time you navigate from menu.\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/config_measurements_list.JPG"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/config_measurements_list_hu3d3982a9069d08030fb495d48265db1c_132706_600x400_fit_q75_box.JPG"\n         width="600" height="364"\n         alt="SNMP Measurements List" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eSNMP Measurements List\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch2 id="addedit-measurements"\u003eAdd/Edit Measurements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAdd\u003c/strong\u003e: In the Measurements list click on new button \u003cimg src="/images/new_button.JPG" alt="New Button" title="New Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEdit\u003c/strong\u003e: Click on Measurement edit\u0026rsquo;s button \u003cimg src="/images/edit_button.JPG" alt="Edit Button" title="Edit Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Create/Modify form will show up:\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/config_measurements_edit.JPG"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/config_measurements_edit_huf6a27cb785e9ef76c8fa56db66ba7964_58237_600x400_fit_q75_box.JPG"\n         width="429" height="400"\n         alt="Create/Modify Measurements" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eCreate/Modify Measurements\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch3 id="multi-edit-in-measurements"\u003eMulti edit in Measurements\u003c/h3\u003e\n\u003cp\u003eMulti edit has 2 options: Remove and Change property\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eRemove: Allows to remove all the selected items\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChange property: Allows to change the selected property of all the selected items. The properties are the same defined in the configuration.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eProperty\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eOptions/Values\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexTag\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eTag Name (string)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexAsValue\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003eTrue/False\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="configuration-parameters"\u003eConfiguration Parameters\u003c/h3\u003e\n\u003ch4 id="core-settings"\u003eCore Settings\u003c/h4\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003eText String that uniquely identify the measurement recommended use the MIB Name prefixed/suffixed with some other string data we can easily identify (as manufacturer or model) that will help us to look in the Measurement config section, should be unique in the database\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eName\u003c/td\u003e\n\u003ctd\u003eThis will be the Measurement name created in the Database when sending data, will let us to query data with  \u0026ldquo;SELECT * from \u003cName\u003e\u0026hellip;\u0026rdquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id="measurement-settings"\u003eMeasurement Settings\u003c/h4\u003e\n\u003cp\u003eThe behaviour of a measurement and its related metrics is given by the field \u003ccode\u003eGetMode\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id="direct-value"\u003eDirect Value\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003eValue\u003c/code\u003e type measurement doesn\u0026rsquo;t go over any OID and it won\u0026rsquo;t generate any tag to identify its metrics\nOnly non-indexed metrics should be added\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eFields\u003c/td\u003e\n\u003ctd\u003eA list of MetricID which will be part of this measurement and what to do with the value. On \u003ccode\u003eValue\u003c/code\u003e measurements only metrics that are not-indexed should be added\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eReport Fields\u003c/td\u003e\n\u003ctd\u003eAll metrics can be configured to be sent or not to the backend:\u003cbr\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eReport always:\u003c/strong\u003ein this mode the vale gathered for this Metric by the agent will be sent to the output db\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eNever report:\u003c/strong\u003ein this mode the value gathered for this metric will not be sent, it has sense when we need this value as a input parameter for computed metrics (metrics of type String-Eval) \u003c/li\u003e \u003cli\u003e\u003cstrong\u003eReport if non zero:\u003c/strong\u003ein this  mode the value is not sent if the result cooked or captured is \u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\u003cul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id="indexed-with-direct-tag"\u003eIndexed with direct TAG\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003eIndexed with direct Tag\u003c/code\u003e measurement iterates over a table (\u003ccode\u003eIndexOID\u003c/code\u003e) and maps the index and result to be used as tags.\nAll attached metrics will be identified by that index, so all the metrics should be, or share, on the same table/index\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexOID\u003c/td\u003e\n\u003ctd\u003e(only required for SNMP Table based data) The OID will be queried to get row Tag Values of the table. Only metrics that shares the same table/index should be added\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexTag\u003c/td\u003e\n\u003ctd\u003e(only required for SNMP Table based data) the tag name will be sent to distinguish among different rows\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexTagFormat\u003c/td\u003e\n\u003ctd\u003e(only required for SNMP Table based data) enable custom format for TAGS based on parameters from values and indexes from IndexOID (parameters as \u003ccode\u003e$IDX1\u003c/code\u003e and \u003ccode\u003e$VAL1\u003c/code\u003e) \u003cbr\u003e Default format is \u003ccode\u003e$VAL1\u003c/code\u003e.\u003cbr/\u003e example: \u003ccode\u003e[$IDX1]-$VAL1\u003c/code\u003e will be sent as tag a \u0026ldquo;[1]-eth0 (see IndexTagFormat below for more detailed info)\u0026rdquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFields\u003c/td\u003e\n\u003ctd\u003eA list of MetricID which will be part of this measurement and what to do with the value. On \u003ccode\u003eValue\u003c/code\u003e measurements only metrics that are not-indexed should be added\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eReport Fields\u003c/td\u003e\n\u003ctd\u003eAll metrics can be configured to be sent or not to the backend:\u003cbr\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eReport always:\u003c/strong\u003ein this mode the vale gathered for this Metric by the agent will be sent to the output db\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eNever report:\u003c/strong\u003ein this mode the value gathered for this metric will not be sent, it has sense when we need this value as a input parameter for computed metrics (metrics of type String-Eval) \u003c/li\u003e \u003cli\u003e\u003cstrong\u003eReport if non zero:\u003c/strong\u003ein this  mode the value is not sent if the result cooked or captured is \u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\u003cul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eExample of valid tables:\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/schema_indexed.jpg"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/schema_indexed_hub1ef4fd42de0515f33fdbfaf2d44e0de_77025_600x400_fit_q75_box.jpg"\n         width="600" height="214"\n         alt="Indexed Schema" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eIndexed Schema\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003eMeasurement Config: \nIndex OID: ifXTable.IfName - 1.3.6.1.2.1.31.1.1.1.1\n\nIndex Process:\n1.3.6.1.2.1.31.1.1.1.1[.1] = `eth0`\n1.3.6.1.2.1.31.1.1.1.1[.2] = `eth1`\n1.3.6.1.2.1.31.1.1.1.1[.3] = `eth2`\n1.3.6.1.2.1.31.1.1.1.1[.4] = `eth3`\n1.3.6.1.2.1.31.1.1.1.1[.5] = `eth4`\n\n\nMetrics:\nifXTable.ifHCInOctets - 1.3.6.1.2.1.31.1.1.1.6\n1.3.6.1.2.1.31.1.1.1.6.[1:eth0] = val1\n1.3.6.1.2.1.31.1.1.1.6.[2:eth1] = val2\n1.3.6.1.2.1.31.1.1.1.6.[3:eth2] = val3\n1.3.6.1.2.1.31.1.1.1.6.[4:eth3] = val4\n1.3.6.1.2.1.31.1.1.1.6.[5:eth4] = val5\n\nifXTable.ifHCInOctets - 1.3.6.1.2.1.31.1.1.1.10\n1.3.6.1.2.1.31.1.1.1.10.[1:eth0] = val1\'\n1.3.6.1.2.1.31.1.1.1.10.[2:eth1] = val2\'\n1.3.6.1.2.1.31.1.1.1.10.[3:eth2] = val3\'\n1.3.6.1.2.1.31.1.1.1.10.[4:eth3] = val4\'\n1.3.6.1.2.1.31.1.1.1.10.[5:eth4] = val5\'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="indexed-with-indirect-tag"\u003eIndexed with indirect TAG\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003eIndexed with indirect TAG\u003c/code\u003e measurements iterates over a table that has as value the related index to retrieve the tag (an indirect index). The related table will be retrieved and used as tags.\nAll attached metrics will be identified by the \u003ccode\u003eIndexOID\u003c/code\u003e, so all the metrics should be, or share, on the same table/index\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexOID\u003c/td\u003e\n\u003ctd\u003e(only required for SNMP Table based data) The OID will be queried to get row Tag Values of the table. Only metrics that shares the same table/index should be added\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexTag\u003c/td\u003e\n\u003ctd\u003e(only required for SNMP Table based data) the tag name will be sent to distinguish among different rows\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTagOID\u003c/td\u003e\n\u003ctd\u003e(only required for SNMP indirect Tag based data) the OID will be queried to get TAG value names from other table.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexTagFormat\u003c/td\u003e\n\u003ctd\u003e(only required for SNMP Table based data) enable custom format for TAGS based on parameters from values and indexes from IndexOID ( parameters as \u003ccode\u003e$IDX1\u003c/code\u003e and \u003ccode\u003e$VAL1\u003c/code\u003e) or TagOID when measurement is defined as indirect indexes defined ( parameters \u003ccode\u003e$IDX2\u003c/code\u003e and \u003ccode\u003e$VAL2\u003c/code\u003e). \u003cbr/\u003e Default format is \u003ccode\u003e$VAL2\u003c/code\u003e.\u003cbr/\u003e example: \u003ccode\u003e[$IDX1]-$VAL1-$VAL2\u003c/code\u003e will be sent as tag a \u003ccode\u003e[1]-4-eth0\u003c/code\u003e (see IndexTagFormat below for more detailed info)\u0026quot;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFields\u003c/td\u003e\n\u003ctd\u003eA list of MetricID which will be part of this measurement and what to do with the value. On \u003ccode\u003eValue\u003c/code\u003e measurements only metrics that are not-indexed should be added\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eReport Fields\u003c/td\u003e\n\u003ctd\u003eAll metrics can be configured to be sent or not to the backend:\u003cbr\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eReport always:\u003c/strong\u003ein this mode the vale gathered for this Metric by the agent will be sent to the output db\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eNever report:\u003c/strong\u003ein this mode the value gathered for this metric will not be sent, it has sense when we need this value as a input parameter for computed metrics (metrics of type String-Eval) \u003c/li\u003e \u003cli\u003e\u003cstrong\u003eReport if non zero:\u003c/strong\u003ein this  mode the value is not sent if the result cooked or captured is \u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\u003cul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/schema_indexed_it.jpg"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/schema_indexed_it_hu7415ec7d24bcf5094049bcef69649d57_115166_600x400_fit_q75_box.jpg"\n         width="600" height="227"\n         alt="schema indexed it" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eschema indexed it\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eExample of valid tables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eMeasurement Config:\nIndexOID: cpmCPUTotalPhysicalIndex - 1.3.6.1.4.1.9.9.109.1.1.1.1.2\nTagOID: entPhysicalTable.entPhysicalName - 1.3.6.1.2.1.47.1.1.1.1.7\n\nIndex Process:\n\nIndex OID:\n1.3.6.1.4.1.9.9.109.1.1.1.1.2[.1] = `7051`\n1.3.6.1.4.1.9.9.109.1.1.1.1.2[.2] = `7052`\n1.3.6.1.4.1.9.9.109.1.1.1.1.2[.3] = `7053`\n1.3.6.1.4.1.9.9.109.1.1.1.1.2[.4] = `7054`\n1.3.6.1.4.1.9.9.109.1.1.1.1.2[.5] = `7055`\n\n1.3.6.1.2.1.47.1.1.1.1.7[.7051] = `cpu R0/0`\n1.3.6.1.2.1.47.1.1.1.1.7[.7052] = `cpu R1/0`\n1.3.6.1.2.1.47.1.1.1.1.7[.7053] = `cpu R2/0`\n1.3.6.1.2.1.47.1.1.1.1.7[.7054] = `cpu R3/0`\n1.3.6.1.2.1.47.1.1.1.1.7[.7055] = `cpu R4/0`\n\nIndex result:\n[.1:cpu R0/0]\n[.2:cpu R1/0]\n[.3:cpu R2/0]\n[.4:cpu R3/0]\n[.5:cpu R4/0]\n\nMetrics:\n\ncpmCPUTotalTable.cpmCPUTotal1minRev - .1.3.6.1.4.1.9.9.109.1.1.1.1.7\n.1.3.6.1.4.1.9.9.109.1.1.1.1.7.[1:cpu R0/0] = val1\n.1.3.6.1.4.1.9.9.109.1.1.1.1.7.[2:cpu R1/0] = val2\n.1.3.6.1.4.1.9.9.109.1.1.1.1.7.[3:cpu R2/0] = val3\n.1.3.6.1.4.1.9.9.109.1.1.1.1.7.[4:cpu R3/0] = val4\n.1.3.6.1.4.1.9.9.109.1.1.1.1.7.[5:cpu R4/0] = val5\n\ncpmCPUTotalTable.cpmCPUTotal5minRev - .1.3.6.1.4.1.9.9.109.1.1.1.1.8\n.1.3.6.1.4.1.9.9.109.1.1.1.1.8.[1:cpu R0/0] = val1\'\n.1.3.6.1.4.1.9.9.109.1.1.1.1.8.[2:cpu R1/0] = val2\'\n.1.3.6.1.4.1.9.9.109.1.1.1.1.8.[3:cpu R2/0] = val3\'\n.1.3.6.1.4.1.9.9.109.1.1.1.1.8.[4:cpu R3/0] = val4\'\n.1.3.6.1.4.1.9.9.109.1.1.1.1.8.[5:cpu R4/0] = val5\'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="indexed-with-multiple-indirect-tag"\u003eIndexed with multiple indirect TAG\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003eIndexed with multiple indirect TAG\u003c/code\u003e measurements iterates N times over different tables to be retrieving the values that relates those tables until the tag is retrieved. The final related table will be retrieved and used as tags.\nAll attached metrics will be identified by the \u003ccode\u003eIndexOID\u003c/code\u003e, so all the metrics should be, or share, on the same table/index\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexOID\u003c/td\u003e\n\u003ctd\u003e(only required for SNMP Table based data) The OID will be queried to get row Tag Values of the table. Only metrics that shares the same table/index should be added. The final index will contain the first queried indexes of the table\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexTag\u003c/td\u003e\n\u003ctd\u003e(only required for SNMP Table based data) the tag name will be sent to distinguish among different rows\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMultiple TagOID\u003c/td\u003e\n\u003ctd\u003eThe multiples OIDs \u003cstrong\u003ein order\u003c/strong\u003e that will be queried to retrieve the tag value. The value will be extracted and formatted from the last queried table. Each \u003ccode\u003eMultipleTagOID\u003c/code\u003e has: \u003cul\u003e\u003cli\u003eTagOID: the OID will be queried to get the value to iterate over the next one\u003c/li\u003e\u003cli\u003eIndex Format: the index format using \u003ccode\u003eIndexTagFormat\u003c/code\u003e syntax to allow match and keep iterating over the tables\u003c/li\u003e\u003c/ul\u003e See examples section for an extended example of multiple tagoid. \u003cstrong\u003eTagOIDs must be defined with order\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexTagFormat\u003c/td\u003e\n\u003ctd\u003e(only required for SNMP Table based data) enable custom format for TAGS based on parameters from values and indexes from IndexOID ( parameters as \u003ccode\u003e$IDX1\u003c/code\u003e and \u003ccode\u003e$VAL1\u003c/code\u003e) or TagOID when measurement is defined as indirect indexes defined ( parameters \u003ccode\u003e$IDX2\u003c/code\u003e and \u003ccode\u003e$VAL2\u003c/code\u003e). \u003cbr/\u003e Default format is \u003ccode\u003e$VAL2\u003c/code\u003e.\u003cbr/\u003e example: \u003ccode\u003e[$IDX1]-$VAL1-$VAL2\u003c/code\u003e will be sent as tag a \u003ccode\u003e[1]-4-eth0\u003c/code\u003e (see IndexTagFormat below for more detailed info)\u0026quot;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFields\u003c/td\u003e\n\u003ctd\u003eA list of MetricID which will be part of this measurement and what to do with the value. On \u003ccode\u003eValue\u003c/code\u003e measurements only metrics that are not-indexed should be added\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eReport Fields\u003c/td\u003e\n\u003ctd\u003eAll metrics can be configured to be sent or not to the backend:\u003cbr\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eReport always:\u003c/strong\u003ein this mode the vale gathered for this Metric by the agent will be sent to the output db\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eNever report:\u003c/strong\u003ein this mode the value gathered for this metric will not be sent, it has sense when we need this value as a input parameter for computed metrics (metrics of type String-Eval) \u003c/li\u003e \u003cli\u003e\u003cstrong\u003eReport if non zero:\u003c/strong\u003ein this  mode the value is not sent if the result cooked or captured is \u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\u003cul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cstrong\u003eMutiple TagOID manipulation\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eUse the following button to add a new TagOID \u003cimg src="images/add_button.jpg" alt="add_button" title="Add button"\u003e\u003c/p\u003e\n\u003cp\u003eThe following buttons allow to reorder and delete defined TagOIDs:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRemove: \u003cimg src="images/remove_button.jpg" alt="remove_button" title="Remove button"\u003e\u003c/li\u003e\n\u003cli\u003ePromote: \u003cimg src="images/promote_button.jpg" alt="promote_button" title="Promote button"\u003e\u003c/li\u003e\n\u003cli\u003eDemote: \u003cimg src="images/demote_button.jpg" alt="demote_button" title="Demote button"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/multi_tagoid_example.jpg"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/multi_tagoid_example_hu0c3d9b0bd5c9f94896244fe94b9a99eb_28709_600x400_fit_q75_box.jpg"\n         width="600" height="138"\n         alt="Multi Tag OID Example" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eMulti Tag OID Example\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample of valid tables\u003c/strong\u003e:\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/schema_indexed_mit.jpg"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/schema_indexed_mit_hu54fe98ea40114543c090995fdd54d58a_128013_600x400_fit_q75_box.jpg"\n         width="600" height="270"\n         alt="" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003eMeasurement Config:\nIndexOID: indexedExample - 1.2.3.5.1\nMultiTagOID\n        0: - TagOID: example1 - 1.2.3.6.1\n           - IndexFormat: \u0026quot;\u0026quot;\n\n        1: - TagOID: example2 - 1.2.3.7.1\n           - IndexFormat: \u0026quot;\u0026quot;\n\n        2: - TagOID: example3 - 1.2.3.8.1\n           - IndexFormat: \u0026quot;\u0026quot;\n\n\nIndex Process:\nIndexOID - indexExample:\n\n1.2.3.5.1[.1] = `7051`\n1.2.3.5.1[.2] = `7052`\n1.2.3.5.1[.3] = `7053`\n1.2.3.5.1[.1] = `7054`\n1.2.3.5.1[.2] = `7055`\n\nTagOID 0 - example1\n\n1.2.3.6.1[.7051] = `5001`\n1.2.3.6.1[.7052] = `5002`\n1.2.3.6.1[.7053] = `5003`\n1.2.3.6.1[.7054] = `5004`\n1.2.3.6.1[.7055] = `5005`\n\nTagOID 1 - example2\n\n\n1.2.3.7.1[.5001] = `601`\n1.2.3.7.1[.5002] = `602`\n1.2.3.7.1[.5003] = `603`\n1.2.3.7.1[.5004] = `604`\n1.2.3.7.1[.5005] = `605`\n\nTagOID 2 - example3\n\n1.2.3.8.1[.601] = `label0`\n1.2.3.8.1[.602] = `label1`\n1.2.3.8.1[.603] = `label2`\n1.2.3.8.1[.604] = `label3`\n1.2.3.8.1[.605] = `label4`\n\nIndex result:\n[.1:label1]\n[.2:label2]\n[.3:label3]\n[.4:label4]\n[.5:label5]\n\nMetric:\n\nmyMetricExample - 1.2.3.10.1\n\n1.2.3.10.1.[1:label1] = val1\n1.2.3.10.1.[2:label2] = val2\n1.2.3.10.1.[3:label3] = val3\n1.2.3.10.1.[4:label4] = val4\n1.2.3.10.1.[5:label5] = val5\n\nmyMetricExample - 1.2.3.10.2\n\n1.2.3.10.1.[1:label1] = val1\'\n1.2.3.10.1.[2:label2] = val2\'\n1.2.3.10.1.[3:label3] = val3\'\n1.2.3.10.1.[4:label4] = val4\'\n1.2.3.10.1.[5:label5] = val5\'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="multiple-indexes"\u003eMultiple Indexes\u003c/h4\u003e\n\u003cp\u003eThe multiple indexes measurement allows the user to define different internal measurements that will create the map of index/value and can have dependencies to share its information between them\nTo see an example go to examples section\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eMulti Index Measurements\u003c/td\u003e\n\u003ctd\u003eThe array of indexes measurements (direct, indirect and multi indirect) to create a complex index with tags embebbed\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eResult\u003c/td\u003e\n\u003ctd\u003eCustom final index that will be used to match fields OIDs. The syntax is explained on section below\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eEach \u003ccode\u003eMulti Index Measurement\u003c/code\u003e can be identified by its index (position in array)\u003c/p\u003e\n\u003cp\u003eThe options available on the \u003ccode\u003eMulti Index Measurements\u003c/code\u003e are the same as defined above, depending of the type (\u003ccode\u003eGetMode\u003c/code\u003e) and the added one.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Label\u003c/td\u003e\n\u003ctd\u003eThe internal name of the index\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Description\u003c/td\u003e\n\u003ctd\u003eThe internal description of the index\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Dependency\u003c/td\u003e\n\u003ctd\u003eThe dependency syntax to heridate tags from other index based on the following syntax: `IDX{\u003cindex\u003e};DOT[NN:MM];FILL(XXX)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cstrong\u003eMutiple Index manipulation\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSelect the type of Index to add a new one, click on the following button to add a index \u003cimg src="images/add_button.jpg" alt="add_button" title="Add button"\u003e.\nAvailable indexes are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e(snmp Table) Indexed with direct TAG - indexed\u003c/li\u003e\n\u003cli\u003e(snmp Table) Indexed with indirect TAG - indexed_it\u003c/li\u003e\n\u003cli\u003e(snmp Table) Indexed with multi indirect tag - indexed_mit\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/multi_index_options.jpg"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/multi_index_options_hud48e021442ae8a12d645247984cb0d89_23468_600x400_fit_q75_box.jpg"\n         width="600" height="104"\n         alt="Multi Index Options" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eMulti Index Options\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eThe following buttons allow to reorder and delete defined Multi Indexes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRemove: \u003cimg src="images/remove_button.jpg" alt="remove_button" title="Remove button"\u003e\u003c/li\u003e\n\u003cli\u003ePromote: \u003cimg src="images/promote_button.jpg" alt="promote_button" title="Promote button"\u003e\u003c/li\u003e\n\u003cli\u003eDemote: \u003cimg src="images/demote_button.jpg" alt="demote_button" title="Demote button"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/multi_index_example.jpg"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/multi_index_example_hu1e3a31dbc2ecdd480bb412afa2b55f40_51844_600x400_fit_q75_box.jpg"\n         width="600" height="168"\n         alt="Multi Index Example" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eMulti Index Example\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch4 id="multi-indexes-dependencies-and-result"\u003eMulti Indexes: Dependencies and Result\u003c/h4\u003e\n\u003cp\u003eMulti Indexes allows the user to define several internal measurements to retrieve different tags and identifies and build a custom index to use it on metrics\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/schema_indexed_multiple.jpg"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/schema_indexed_multiple_hu70658924b1ddabc91aaa367e1aa4a03f_204852_600x400_fit_q75_box.jpg"\n         width="600" height="363"\n         alt="Multiple Indexed Schema" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eMultiple Indexed Schema\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eDependency\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe dependency system between indexes allows the index to heridate already retrieved tags from other indexes and attach them to the current one\nThe syntax follows as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eIDX{IM};DOT[XX:YY];SKIP\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the user defines only \u003ccode\u003eIDX{IM}\u003c/code\u003e, a FILL(\u0026quot;\u0026quot;) strategy will be applied with an entire index match\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eIDX{IM}\u003c/code\u003e references to another index, based on its position of the array. Example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eIndex 0 |   [.1] = \u0026quot;eth0\u0026quot;\n        |\n        |   Index Tag = portName\n--------\nIndex 1 |   [.1] = up\n        |\n        |   Index Tag = \u0026quot;ifStatus\u0026quot;\n        |   Dependency IDX{0}\n        |       --\u0026gt; [.1] = \u0026quot;up|eht0\u0026quot; [ifStatus, portName]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eDOT[XX:YY]\u003c/code\u003e allows to change the check option to heridate tags from another index, this is useful if the tables doesn\u0026rsquo;t have the same dimension, but it shares a common index. Example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eIndex 0 |   [.1] = \u0026quot;eth0\u0026quot;\n        |\n        |   Index Tag = \u0026quot;portName\u0026quot;\n--------\nIndex 1 |   [.1.2] = up\n        |\n        |   Index Tag = \u0026quot;ifStatus\u0026quot;\n        |   Dependency IDX{0};DOT[0:0];FILL()\n        |       --\u0026gt; [1.1] = \u0026quot;up|eht0\u0026quot; [ifStatus, portName]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eFILL(XX)|SKIP\u003c/code\u003e section defines the strategy of non match index:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eFILL(XX)\u003c/code\u003e allows the user to define a custom tag value (\u003ccode\u003eXXX\u003c/code\u003e) if the dependency index has no the current index on it.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eSKIP\u003c/code\u003e deletes the current point if it doesn\u0026rsquo;t match with the current index\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eIndex 0 |   [.1] = \u0026quot;eth0\u0026quot;\n---------\nIndex 1 |   [.1.1] = \u0026quot;up\u0026quot;\n        |   [.2.1] = \u0026quot;down\u0026quot;\n        |    \n        |   Dependency: IDX{0};DOT[0:0];FILL(no value present)\n        |       --\u0026gt; [1.1] = \u0026quot;up|eth0\u0026quot; [ifStatus, portName]\n        |       --\u0026gt; [2.1] = \u0026quot;down|no value present\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eIndex 0 |   [.1] = \u0026quot;eth0\u0026quot;\n---------\nIndex 1 |   [.1.1] = \u0026quot;up\u0026quot;\n        |   [.2.1] = \u0026quot;down\u0026quot;\n        |\n        |   Index Tag = \u0026quot;ifStatus\u0026quot;\n        |   Dependency: IDX{0};DOT[0:0];SKIP\n        |       --\u0026gt; [1.1] = \u0026quot;up|eth0\u0026quot; [ifStatus, portName]\n        |       \u0026lt; DELETED [2.1]\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eResult\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe result allows the user to create a totally custom index to be set up with attached fields.\nThe syntax follows as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eIDX{IM};DOT[XX:YY]].\u0026lt;number\u0026gt;.\u0026lt;IDX{IM};DOT[XX:YY]\u0026gt;.\u0026lt;...\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf several IDX{IM} are found, it will create a big index using the scalar product between them heridating its tags\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eIndex 0 |   [.1] = \u0026quot;eth0\u0026quot;\n        |   [.2] = \u0026quot;eth1\u0026quot;\n        |   \u0026lt;No dependency configured\u0026gt;\n---------\nIndex 1 |   [.3] = \u0026quot;up\u0026quot;\n        |   [.4] = \u0026quot;down\u0026quot;\n        |   \u0026lt;No dependency configured\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eResult: \u003ccode\u003eIDX{0}.IDX{1}\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eFinal Index | [.1.3] = \u0026quot;eth0 | up\u0026quot; \n            | [.1.4] = \u0026quot;eth0 | down\u0026quot;\n            | [.2.3] = \u0026quot;eth1 | up\u0026quot;\n            | [.2.4] = \u0026quot;eth1 | down\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eResult: \u003ccode\u003e.35.IDX{0}\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eFinal Index | [.35.1] = \u0026quot;eth0\u0026quot; \n            | [.35.1] = \u0026quot;eth0\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eResult: \u003ccode\u003e.35.IDX{1}.42\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eFinal Index | [.35.3.42] = \u0026quot;up\u0026quot; \n            | [.35.3.42] = \u0026quot;down\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="notes"\u003eNotes\u003c/h2\u003e\n\u003chr\u003e\n\u003ch3 id="indextagformat-definition"\u003eIndexTagFormat Definition\u003c/h3\u003e\n\u003cp\u003eEnable user define a custom format for TAGS based on parameters from values and indexes from IndexOID or TagOID when measurement is defined as indirect indexes defined\u003c/p\u003e\n\u003cp\u003eCurrent variable inputs are only IDX1,VAL1 for direct indexed measurements and also IDX2,VAL2 when indirect indexed measurements.\u003c/p\u003e\n\u003cp\u003eTo refer to these variables you could prepend a \u0026lsquo;$\u0026rsquo; to the variable name. If not definition exist,default format will be $VAL1 for direct indexed tables and $VAL2 for indirect indexed.\u003c/p\u003e\n\u003cp\u003eUser can also take parts of each variable and apply transformation to get desired tag name by only use the following  syntax\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e${VAR|SELECTOR|TRANSFORMATOR}\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eVAR : the variable source, could be referenced several times in the same definition\u003c/li\u003e\n\u003cli\u003eSELECTOR: (by default the complete variable string) will select a bit of the VARIABLE, could be void string and the default value will be selected\u003c/li\u003e\n\u003cli\u003eTRANSFORMATOR (by default STRING) will apply a transformation on the previously selected bit of variable, could be void string and the default value will be selected\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e$VAR will be equivalent to ${VAR|ALL|STRING} and also to ${VAR||}\u003c/p\u003e\n\u003ch4 id="defined-selectors"\u003eDefined selectors\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eALL\u003c/strong\u003e: complete string\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDOT[X:Y]\u003c/strong\u003e : splits variable in an array of numbers and select only from the Xth to the Yth value, if X is omitted 0 will be chosen , if  Y is omitted the last element on the splitted array will be chosen , in this mode DOT[0:] is equivalent to ALL. Counter always begins from 0 and both X and Y position will be included in the final selection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eREGEX/regex-expression/substitution-expression/\u003c/strong\u003e: (since 0.7.3) Regex based Substitution pattern , each section is described in the following table\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eregex section\u003c/th\u003e\n\u003cth\u003emeaning\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eregex-expresion\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003ecould be any valid \u003ca href="https://github.com/google/re2/wiki/Syntax"\u003egolang based regular expressions\u003c/a\u003e. These regular expressions should have defined \u003ca href="http://www.regular-expressions.info/refcapture.html"\u003ecapturing groups\u003c/a\u003e\u003cbr/\u003e \u003cstrong\u003eLimitation\u003c/strong\u003e:  we can not use the \u0026ldquo;|\u0026rdquo; character because of this character would alter the \u003ccode\u003e${VAR|SELECTOR|TRANSFORMATOR}${VAR|SELECTOR|TRANSFORMATOR}\u003c/code\u003e struct.  ( In the future would should improve syntax to avoid this limitation).\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003esubstitution-expression\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eany string containing valid \u003ca href="http://www.regular-expressions.info/refcapture.html"\u003eback references\u003c/a\u003e ie \u0026ldquo;\\1, \\2, \\3, \u0026hellip;.. etc\u0026rdquo;, for previously defined capturing groups\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id="defined-transformations"\u003eDefined transformations\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSTRING\u003c/strong\u003e : return the selected value as an string\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDEC2ASCII\u003c/strong\u003e: decode a dotted separated string with numbers as ascii bytes of a string (\u0026ldquo;100.101.102.97.117.108.116\u0026rdquo; will be \u0026ldquo;default\u0026rdquo;)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMAC\u003c/strong\u003e: decode a string  as MAC address.( .1.3.6.1.2.1.10.127.1.3.3.1.2.89 = STRING: 60:2a:d0:40:42:1a ) will be decoded as MAC with this format \u003ccode\u003e:${VAL1|DOT[0:]|MAC}\u003c/code\u003e (\u0026gt;version 0.10)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="example"\u003eExample\u003c/h4\u003e\n\u003cp\u003eWe can use inetCidrRouteIfIndex as example:\nThe following is the output from one row of the table with \u0026ldquo;snmpwalk\u0026rdquo;.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eIP-FORWARD-MIB::inetCidrRouteIfIndex.ipv4.\u0026quot;0.0.0.0\u0026quot;.0.2.0.0.ipv4.\u0026quot;10.0.2.2\u0026quot; = INTEGER: 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eequivalent to that.(I\u0026rsquo;ve separated baseOID from Index)\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eBaseOID[1.3.6.1.2.1.4.24.7.1.7]+ INDEX[.1.4.0.0.0.0.0.2.0.0.1.4.10.0.2.2] = INTEGER: 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ewhen looking for index info here inetCidrRouteEntry (http://oid-info.com/get/1.3.6.1.2.1.4.24.7.1), we have found the following\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eINDEX {\ninetCidrRouteDestType, ipv4(1), ipv6(2), ipv4z(3), ipv6z(4)) = 1\ninetCidrRouteDest,	= 4 - 0.0.0.0\ninetCidrRoutePfxLen,    = 0.2\ninetCidrRoutePolicy,    = 0.0\ninetCidrRouteNextHopType = 1\ninetCidrRouteNextHop  = 4 -\u0026gt; 10.0.2.2\n}\n\n````bash\nIn this case we would like by example take RouteDest and RouteNextHop as IndexTAG with\n\n```bash\n${IDX1|DOT[2:5]|STRING} -\u0026gt; ${IDX1|DOT[12:15]|STRING}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ethis will equivalent to\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e${IDX1|DOT[2:5]|} -\u0026gt; ${IDX1|DOT[12:15]|}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd the output result will be\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e0.0.0.0 -\u0026gt; 10.0.2.2\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\u003ch1 id="examples"\u003eExamples\u003c/h1\u003e\n\u003ch2 id="example-of-indexed-with-multiple-indirect-tag"\u003eExample of Indexed with multiple indirect TAG\u003c/h2\u003e\n\u003cp\u003eLets assume that we want to retrieve the following values of the following metrics\nThe base OID from those are \u003ccode\u003e1.1\u003c/code\u003e and they have a double index, [X,Y] which gives us the following information:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eX=related interface\nY=related object\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003emyMetricTable: 1.1 [X,Y]\n1.1[.1.1] | 51\n1.1[.2.1] | 52\n1.1[.3.1] | 53\n1.1[.4.1] | 54\n1.3[.1.1] | 21\n1.3[.2.1] | 22\n1.3[.3.1] | 23\n1.3[.4.1] | 24\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo identify those metrics, we need to retrieve the tag value on \u003ccode\u003emyFinalRealTagTable - 1.5\u003c/code\u003e, but we need a double index iteration to retrieve the desired tag and it is indexed by \u003ccode\u003eM\u003c/code\u003e.\nThe process would be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e1.2.[X.Y] --\u0026gt; [Z] --\u0026gt; 1.10.[X.Z] --\u0026gt; [M] --\u0026gt; 1.5.[M] --\u0026gt; tag\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003emyIndexTagTable: .1.2[X.Y] | [Z]\n.1.2.[1.1] | 2\n.1.2.[2.1] | 2\n.1.2.[3.1] | 2\n.1.2.[4.1] | 2\n---\nmyRealTagTable: .1.10.[X.Z] | [M]\n.1.10.1.2 | 90\n.1.10.2.2 | 91\n.1.10.3.2 | 92\n.1.10.4.2 | 93\n---\nmyFinalRealTagTable: .1.5.[M] | [TagValue]\n.1.5.94 | \u0026quot;eth1\u0026quot;\n.1.5.95 | \u0026quot;eth2\u0026quot;\n.1.5.96 | \u0026quot;eth3\u0026quot;\n.1.5.97 | \u0026quot;eth4\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs we can see we need to go over 3 different tables and different indexes to retrieve values that can identify each value of pair [X.Y].\nTo achieve that, we create the following measuement:\u003c/p\u003e\n\u003cp\u003eAs we need to match with the metrics, we need to go over \u003ccode\u003emyIndexTagTable\u003c/code\u003e to retrieve and store indexes \u003ccode\u003e[X.Y]\u003c/code\u003e, so we configure the \u003ccode\u003eIndexOID\u003c/code\u003e as \u003ccode\u003e1.2\u003c/code\u003e. The output of this table will be used as the next one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eDef:\nIndexOID: \u0026quot;1.2\u0026quot; | [X.Y]\nResult: \u0026quot;2, 2, 2, 2 | [Z]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo retrieve the second table, we cannot use the value given \u003ccode\u003eZ\u003c/code\u003e becouse we need also the var \u003ccode\u003eX\u003c/code\u003e in order to match the index. As the \u003ccode\u003eX\u003c/code\u003e is present on table \u003ccode\u003emyIndexTagTable\u003c/code\u003e and \u003ccode\u003emyRealTagTable\u003c/code\u003e, we can format the index to achieve the desired [X.Z]\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eDef:\nTagOID: \u0026quot;.1.10\u0026quot;,\nIndexFormat: \u0026quot;${IDX1|DOT[0:0]|STRING}.$VAL1\u0026quot; --\u0026gt; [X.Z]\nResult: \u0026quot;90, 91, 92, 93\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the matched value of \u003ccode\u003eM\u003c/code\u003e, we can retrieve the final table, in this case, we don\u0026rsquo;t need to setup a format as the required index is directly indexed by [M]\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eDef:\nTagOID: \u0026quot;.1.5\u0026quot;,\nIndexFormat: \u0026quot;\u0026quot;\nResult: \u0026quot;eth1, eth2, eth3, eth4\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn this point, we will have map that relates our initial [X.Y] to our desired tags\nRemember that on multiple inderect measurement, the final index is equal than the IndexOID to be equal than the metrics\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e1.1 | eth1\n1.2 | eth2\n1.3 | eth3\n1.4 | eth4\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="example-of-multiindex-ifmib"\u003eExample of MultiIndex: ifMIB\u003c/h2\u003e\n\u003cp\u003eAll the metric of IfMIB are based on \u003ccode\u003eIfIndex OID: 1.3.6.1.2.1.2.2.1.1\u003c/code\u003e. According to its description:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA unique value for each interface. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity\u0026rsquo;s network management system to the next re-initialization.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAs all related metrics shares the same index, we can define a simple \u003ccode\u003eDirect Index\u003c/code\u003e measurement to retrieve those metrics, but, for this case, metrics that are constants, like tags, doesn\u0026rsquo;t need to be polled every frequency, it can be gathered on filter freq.\u003c/p\u003e\n\u003cp\u003eOn this example, we will use the following metrics that are, in some way, static for each interface:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003cth\u003eOID\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eifDesc\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.2.2.1.2\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eifName\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eifAlias\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.18\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe related fields that we want to gather are defined as SNMP Metrics:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eFieldName\u003c/th\u003e\n\u003cth\u003eBaseOID\u003c/th\u003e\n\u003cth\u003eDataSrcType\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eifHCInOctets\u003c/td\u003e\n\u003ctd\u003eifHCInOctets\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.6\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eifHCOutOctets\u003c/td\u003e\n\u003ctd\u003eifHCOutOctets\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.10\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eA simple walk over those metrics gives us the follow index/value:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eifHCInOctets \u0026gt;\n.1.3.6.1.2.1.31.1.1.1.6[.1] | 3\n.1.3.6.1.2.1.31.1.1.1.6[.2] | 4\n.1.3.6.1.2.1.31.1.1.1.6[.3]| 20\n\n\nifHCOutOctets \u0026gt;\n.1.3.6.1.2.1.31.1.1.1.6[.1] | 5\n.1.3.6.1.2.1.31.1.1.1.6[.2] | 7\n.1.3.6.1.2.1.31.1.1.1.6[.3]| 35\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn order to identify those metrics with \u003ccode\u003eifAlias\u003c/code\u003e, \u003ccode\u003eifName\u003c/code\u003e, \u003ccode\u003eifDesc\u003c/code\u003e tags, we create a create a \u003ccode\u003eMulti Index Measurement\u003c/code\u003e,with 3 different indexes. As the indexes \u003cstrong\u003edon\u0026rsquo;t need to be ordered\u003c/strong\u003e we will define it in a non-logic order\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eLabel\u003c/th\u003e\n\u003cth\u003eIndex Description\u003c/th\u003e\n\u003cth\u003eIndex Base OID\u003c/th\u003e\n\u003cth\u003eIndex Tag\u003c/th\u003e\n\u003cth\u003eIndex Tag Format\u003c/th\u003e\n\u003cth\u003eIndex Dependency\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eIndexed with direct Tag\u003c/td\u003e\n\u003ctd\u003eifName\u003c/td\u003e\n\u003ctd\u003eIndex to retrieve ifName tag\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.1\u003c/td\u003e\n\u003ctd\u003eifName\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e\u0026quot;\u0026quot;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003eIndexed with direct Tag\u003c/td\u003e\n\u003ctd\u003eifDesc\u003c/td\u003e\n\u003ctd\u003eIndex to retrieve ifDesc\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.2.2.1.2\u003c/td\u003e\n\u003ctd\u003eifDesc\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003eIDX{2};DOT[0:0];SKIP  (note that it references with an index that is greater than the current one. Remember that the order is not needed)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003eIndexed with direct Tag\u003c/td\u003e\n\u003ctd\u003eifAlias\u003c/td\u003e\n\u003ctd\u003eIndex to retrieve ifAlias\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.18\u003c/td\u003e\n\u003ctd\u003eifAlias\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003eIDX{0};DOT[0:0];SKIP\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eAs each index refers to a single measurement and it has its own lifecycle, the Dependency is used only to create the final result. In this case, we want to retrieve the final tags from IDX{1} (it will heridate the IDX{2} and IDX{0}) so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eResult: \u0026quot;IDX{1}\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExample of measurement definition:\u003c/p\u003e\n\u003cp\u003e![ifMIB_MultiIndex]\u003c/p\u003e\n\u003cp\u003eEach index will save on its own structure the gathered data based on its definition:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eIndex 0 | ifName \u0026gt;\n.1.3.6.1.2.1.31.1.1.1.1[.1] | \u0026quot;Te1/0/1\u0026quot; || ifName\n.1.3.6.1.2.1.31.1.1.1.1[.2] | \u0026quot;Te1/0/2\u0026quot; || ifName\n.1.3.6.1.2.1.31.1.1.1.1[.3]| \u0026quot;Te1/0/3\u0026quot; || ifName\n\nIndex 1 | ifDesc \u0026gt;\n.1.3.6.1.2.1.2.2.1.2[.1] |  \u0026quot;TenGigabitEthernet1/0/1\u0026quot; || ifDesc\n.1.3.6.1.2.1.2.2.1.2[.2] |  \u0026quot;TenGigabitEthernet1/0/2\u0026quot; || ifDesc\n.1.3.6.1.2.1.2.2.1.2[.3]|  \u0026quot;TenGigabitEthernet1/0/3\u0026quot; || ifDesc\n\nIndex 2 | ifAlias \u0026gt;\n.1.3.6.1.2.1.31.1.1.1.18[.1] |  \u0026quot;To home\u0026quot; || ifAlias\n.1.3.6.1.2.1.31.1.1.1.18[.2] |  \u0026quot;-- \u0026lt;null, not defined!\u0026gt;\u0026quot; || ifAlias\n.1.3.6.1.2.1.31.1.1.1.18[.3]|  \u0026quot;To shop\u0026quot; || ifAlias\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen building the result, all the measurements will be ordered based on dependencies, so, it will processed on the following order:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e0| Index 0 | ifName  | Not dependency\n1| Index 2 | ifAlias | Dependency on Index 0\n2| Index 1 | ifDesc | Dependency on old Index 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe building index schema follows as:\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/schema_example_multiple_indexes_ifmib.jpg"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/measurements/images/schema_example_multiple_indexes_ifmib_huea05135d6d1eef14f705592bd75ca3ca_122954_600x400_fit_q75_box.jpg"\n         width="600" height="357"\n         alt="Example IfMib Multiple Indexes" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eExample IfMib Multiple Indexes\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eWhen a dependency exist, it tries to heridate the tags that matches the current OID. If it doesn\u0026rsquo;t match, it applies the strategy, in this case \u003ccode\u003eSKIP\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eIndex 2 | ifAlias - IDX{0};DOT[0:0];SKIP \u0026gt;\n.1.3.6.1.2.1.31.1.1.1.18[.1] | \u0026quot;Tel1/0/1|To home\u0026quot; || ifName, ifAlias \n.1.3.6.1.2.1.31.1.1.1.18[.3]| \u0026quot;Te1/0/3|To shop\u0026quot; || ifName, ifAlias\n\n---\nindex [.2] it has been skipped due it doesn\'t exist on ifAlias and it will be skipped\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe Index 2 dependency will use the new Index 1:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eIndex 1 | ifDesc - IDX{2};DOT[0:0];SKIP\n.1.3.6.1.2.1.2.2.1.2[.1] |  \u0026quot;Tel1/0/1|To home|TenGigabitEthernet1/0/1\u0026quot;\n.1.3.6.1.2.1.2.2.1.2[.3]|  \u0026quot;Te1/0/3|To shop|TenGigabitEthernet1/0/3\u0026quot;\n\n---\nindex [.2] it has been skipped due it doesn\'t exist on processed Index 1 and it will be skipped\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe result (\u003ccode\u003eIDX{1}\u003c/code\u003e) will be directly the Index 1- ifAlias with the new heridated tags:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e.1.3.6.1.2.1.2.2.1.2[.1] |  \u0026quot;Tel1/0/1|To home|TenGigabitEthernet1/0/1\u0026quot; || ifName | ifAlias | ifDesc\n.1.3.6.1.2.1.2.2.1.2[.3]|  \u0026quot;Te1/0/3|To shop|TenGigabitEthernet1/0/3\u0026quot;  || ifName | ifAlias | ifDesc\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, the final gathered metrics will be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003eifHCInOctets \u0026gt;\n.1.3.6.1.2.1.31.1.1.1.6[.1] | 3   || ifName=\u0026quot;Tel1/0/1\u0026quot;,ifAlias=\u0026quot;To home\u0026quot;,ifDesc=\u0026quot;TenGigabitEthernet1/0/1\u0026quot;\n.1.3.6.1.2.1.31.1.1.1.6[.3]| 20  || ifName=\u0026quot;Te1/0/3\u0026quot;,ifAlias=\u0026quot;To shop\u0026quot;,ifDesc=\u0026quot;TenGigabitEthernet1/0/3\u0026quot;\n\nifHCOutOctets \u0026gt;\n.1.3.6.1.2.1.31.1.1.1.6[.1] | 5   || ifName=\u0026quot;Tel1/0/1\u0026quot;,ifAlias=\u0026quot;To home\u0026quot;,ifDesc=\u0026quot;TenGigabitEthernet1/0/1\u0026quot;\n.1.3.6.1.2.1.31.1.1.1.6[.3]| 35  || ifName=\u0026quot;Te1/0/3\u0026quot;,ifAlias=\u0026quot;To shop\u0026quot;,ifDesc=\u0026quot;TenGigabitEthernet1/0/3\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:5,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/components/measurement-groups/",title:"Measurement Groups",description:'A Measurement Group is a collection  of measurements, and its main goal is to act as a "Product" or "Device Model" Template. Once defined should be easy creating new devices and only adding this measurement group. You can add as many measurements as you wish.',content:'\u003ch2 id="view"\u003eView\u003c/h2\u003e\n\u003cp\u003eConfigured \u003cstrong\u003eMeasurement Groups\u003c/strong\u003e are shown as table. This will appear every time you navigate from menu.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/MeasGroups/config_meas_groups_list.JPG" alt="Measurement Groups list"\u003e\u003c/p\u003e\n\u003ch2 id="addedit-influxdb-output-databases"\u003eAdd/Edit InfluxDB output databases\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAdd\u003c/strong\u003e: In the InfluxDB Servers list click on new button \u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Tables/new_button.JPG" alt="New Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEdit\u003c/strong\u003e: Click on InfluxDB edit\u0026rsquo;s button \u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Tables/edit_button.JPG" alt="Edit Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Create/Modify form will show up:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/MeasGroups/config_meas_groups_edit.JPG" alt="New button"\u003e\u003c/p\u003e\n\u003ch3 id="configuration-parameters"\u003eConfiguration Parameters\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType of settings\u003c/th\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eMeasurementGroups settings\u003c/td\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003eText String that uniquely identify the measurement group recommended use the Product/Device Name/model as, should be unique in the database\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eMeasurements\u003c/td\u003e\n\u003ctd\u003eA list of measurement id\u0026rsquo;s\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExtra settings\u003c/td\u003e\n\u003ctd\u003eDescription\u003c/td\u003e\n\u003ctd\u003eA description text for the  measurement group.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="multi-edit-in-measurement-groups"\u003eMulti edit in Measurement Groups\u003c/h3\u003e\n\u003cp\u003eMulti edit has 1 option: Remove\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRemove: Allows to remove all the selected items\u003c/li\u003e\n\u003c/ol\u003e\n'},{id:6,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/components/measurement-filters/",title:"Measurement Filters",description:"Filters allows to filter collected data from different Measurements. The filters can be configured using a file, OID Condition or Custom filter.",content:'\u003ch2 id="view"\u003eView\u003c/h2\u003e\n\u003cp\u003eConfigured Measurement Filters are shown as table. This will appear every time you navigate from menu.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/MeasurementFilters/config_meas_filters_list.JPG" alt="SNMP Metric List"\u003e\u003c/p\u003e\n\u003ch2 id="addedit-measurement-filters"\u003eAdd/Edit Measurement Filters\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAdd\u003c/strong\u003e: In the Measurement Filters list click on new button \u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Tables/new_button.JPG" alt="New Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEdit\u003c/strong\u003e: Click on Measurement Filter edit\u0026rsquo;s button \u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Tables/edit_button.JPG" alt="Edit Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Create/Modify form will show up:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/MeasurementFilters/config_meas_filters_edit.JPG" alt="Create/Modify SNMP Metrics"\u003e\u003c/p\u003e\n\u003ch3 id="configuration-parameters"\u003eConfiguration Parameters\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType of settings\u003c/th\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eCore settings\u003c/td\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003eText String for each\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eMeasurementID\u003c/td\u003e\n\u003ctd\u003eThe measurement on which filter could be applied if selected in the device.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFilter settings\u003c/td\u003e\n\u003ctd\u003eFilter Type\u003c/td\u003e\n\u003ctd\u003e\u003cul\u003e\u003cli\u003eOID Condition\u003c/li\u003e\u003cli\u003eFile Condition\u003c/li\u003e\u003cli\u003eCustom Filter\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eFile Name\u003c/td\u003e\n\u003ctd\u003eDepending on Filter Type: \u003cul\u003e\u003cli\u003eFile: the file name by example (\u0026ldquo;my_filer_file_for_device_xxxxx.txt\u0026rdquo;)\u003c/li\u003e\u003cli\u003eOID Condition: ID of defined OID Condition \u003c/li\u003e\u003cli\u003eCustom Fiter: ID of defined Custom Filter\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eEnable Alias\u003c/td\u003e\n\u003ctd\u003e(Only apply on the File Filter or Custom Filter type) after filtering it takes 2on column if defined as a TAG for the measurement better than the original name (in the first column)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExtra settings\u003c/td\u003e\n\u003ctd\u003eDescription\u003c/td\u003e\n\u003ctd\u003eUseful description for the administrator\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="multi-edit-in-measurement-filters"\u003eMulti edit in Measurement Filters\u003c/h3\u003e\n\u003cp\u003eMulti edit has 1 option: Remove\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRemove: Allows to remove all the selected items\u003c/li\u003e\n\u003c/ol\u003e\n'},{id:7,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/",title:"Custom filters",description:"Create a filter directly from OID queries on related SNMP Device and related Measurement.",content:'\u003ch2 id="view"\u003eView\u003c/h2\u003e\n\u003cp\u003eConfigured \u003cstrong\u003eCustom Filters\u003c/strong\u003e are shown as table. This will appear every time you navigate from menu.\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/images/customfilter_overview.JPG"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/images/customfilter_overview_huf3fe23c7da3bc7da0f7b93a863f2688b_28227_600x400_fit_q75_box.JPG"\n         width="600" height="253"\n         alt="Custom Filters" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eCustom Filters\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch2 id="addedit-custom-filters"\u003eAdd/Edit Custom Filters\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAdd\u003c/strong\u003e: In the Custom Filters list click on new button \u003cimg src="images/new_button.JPG" alt="New Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEdit\u003c/strong\u003e: Click on Custom Filter edit\u0026rsquo;s button \u003cimg src="images/edit_button.JPG" alt="Edit Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA modal will shown up with some steps that the user must complete:\u003c/p\u003e\n\u003ch3 id="1-select-related-snmp-device"\u003e1. Select related SNMP Device:\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote:\u003c/em\u003e\u003c/strong\u003e: Only valid when creating a new Custom Filter\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote:\u003c/em\u003e\u003c/strong\u003e: The user can change the related device clicking on \u003ccode\u003epen\u003c/code\u003e on the modal top\u003c/p\u003e\n\u003cp\u003eSelect the \u003ccode\u003eSNMP Device\u003c/code\u003e to do the query:\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/images/customfilter_new_modal_init.JPG"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/images/customfilter_new_modal_init_huf3fe23c7da3bc7da0f7b93a863f2688b_16853_600x400_fit_q75_box.JPG"\n         width="600" height="81"\n         alt="Select Device" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eSelect Device\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch3 id="2-select-related-measurement"\u003e2. Select related Measurement:\u003c/h3\u003e\n\u003cp\u003eIf it has connection available, select the Measurement Group and Measurement to load the indexed OID:\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/images/customfilter_connectiondata_panel.JPG"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/images/customfilter_connectiondata_panel_huf3fe23c7da3bc7da0f7b93a863f2688b_19616_600x400_fit_q75_box.JPG"\n         width="499" height="172"\n         alt="Connection data panel" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eConnection data panel\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch3 id="3-select-values"\u003e3. Select values\u003c/h3\u003e\n\u003cp\u003eClick on \u003ccode\u003eSend Query\u003c/code\u003e button and query values will shown. After that, the user can add values from query result and from custom values:\u003c/p\u003e\n\u003ch4 id="a-query-result"\u003ea. Query Result\u003c/h4\u003e\n\u003cp\u003eSelect the values on the checkbox\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/images/customfilter_queryresult_panel.JPG"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/images/customfilter_queryresult_panel_huf3fe23c7da3bc7da0f7b93a863f2688b_19554_600x400_fit_q75_box.JPG"\n         width="529" height="164"\n         alt="Query Result" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eQuery Result\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch4 id="b-custom-values"\u003eb. Custom Values\u003c/h4\u003e\n\u003cp\u003eClick on \u003ccode\u003eAdd Values\u003c/code\u003e and Custom values form will appear:\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/images/customfilter_customitems_panel.JPG"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/images/customfilter_customitems_panel_huf3fe23c7da3bc7da0f7b93a863f2688b_12784_600x400_fit_q75_box.JPG"\n         width="339" height="78"\n         alt="Query Result" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eQuery Result\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch3 id="configuration-parameters"\u003eConfiguration Parameters\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003eText String for each\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDescription\u003c/td\u003e\n\u003ctd\u003eThe measurement on which filter could be applied if selected in the device.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eItems\u003c/td\u003e\n\u003ctd\u003eItems to filter \u003cul\u003e\u003cli\u003eTagID - Value to filter\u003c/li\u003e\u003cli\u003eAlias to apply on filter\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="creating-measurement-filter"\u003eCreating Measurement Filter\u003c/h3\u003e\n\u003cp\u003eOnce a Custom Filter is added, the user can create a new Measurement Filter and assign the related Measurement and Custom filter to it\u003c/p\u003e\n\n\n\n\n\u003cfigure class="post-figure"\u003e\n  \u003ca href="/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/images/customfilter_newfilter_filled.JPG"\u003e\n    \n    \u003cimg src="/toni-moreno.github.io/snmpcollector.org/docs/components/custom-filters/images/customfilter_newfilter_filled_huf3fe23c7da3bc7da0f7b93a863f2688b_28816_600x400_fit_q75_box.JPG"\n         width="592" height="351"\n         alt="Measurement Filter" /\u003e\n    \n  \u003c/a\u003e\n  \u003cfigcaption\u003eMeasurement Filter\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n'},{id:8,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/components/snmp-devices/",title:"SNMP Devices",description:"The core component: SNMP Devices. The user will define Devices to poll data from using SNMP protocol.",content:'\u003ch1 id="snmp-devices"\u003eSNMP Devices\u003c/h1\u003e\n\u003cp\u003eThe core component: SNMP Devices. The user will define Devices to poll data from using SNMP protocol.\u003c/p\u003e\n\u003ch2 id="view"\u003eView\u003c/h2\u003e\n\u003cp\u003eConfigured \u003cstrong\u003eSNMP Devices\u003c/strong\u003e are shown as table. This will appear every time you navigate from menu.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/SnmpDevices/config_snmp_devices_list.JPG" alt="SNMP Devices list"\u003e\u003c/p\u003e\n\u003ch2 id="addedit-snmp-devices"\u003eAdd/Edit SNMP Devices\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAdd\u003c/strong\u003e: In the SNMP Devices list click on new button \u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Tables/new_button.JPG" alt="New Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEdit\u003c/strong\u003e: Click on SNMP Devices edit\u0026rsquo;s button \u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Tables/edit_button.JPG" alt="Edit Button"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Create/Modify form will show up:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/SnmpDevices/config_snmp_devices_edit_1.jpg" alt="Edit Device 1"\u003e\n\u003cbr/\u003e\u003c/p\u003e\n\u003ch3 id="configuration-parameters"\u003eConfiguration Parameters\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eType of settings\u003c/th\u003e\n\u003cth\u003eConfig Parameter\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eCore settings\u003c/td\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003eText String that uniquely identify the device , should be unique in the config db, it can be hostname, serial number or any other text id\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eActive\u003c/td\u003e\n\u003ctd\u003elet device begin gathering process on agent boot process\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDevice settings\u003c/td\u003e\n\u003ctd\u003eHost\u003c/td\u003e\n\u003ctd\u003ethe network direction the agent will  use to do snmp connection , could be IP or fqdn name\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ePort\u003c/td\u003e\n\u003ctd\u003ethe network port where the agent will use to do snmp connections\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eTimeout\u003c/td\u003e\n\u003ctd\u003esets de timeout for each SNMP query\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eRetries\u003c/td\u003e\n\u003ctd\u003esets the number of retries to attempt within Timeout\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eAlternate System OID\u0026rsquo;s\u003c/td\u003e\n\u003ctd\u003eSet OID to get like MIB-2::System Info for non MIB-2 based devices\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDebug settings\u003c/td\u003e\n\u003ctd\u003eLogLevel\u003c/td\u003e\n\u003ctd\u003eenable use select verbosity of the device log\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eSnmpDebug\u003c/td\u003e\n\u003ctd\u003eif this option is set all snmp low level protocol queries with detailed info on this device will be written on a file with name \u0026ldquo;snmpdebug_XXXXXX.log\u0026rdquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePolling settings\u003c/td\u003e\n\u003ctd\u003eSnmpversion\u003c/td\u003e\n\u003ctd\u003ecould be any of these [1,2c,3]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eDisable snmpbulk\u003c/td\u003e\n\u003ctd\u003eif true the bulk feature won\u0026rsquo;t be used ( these feature is needed to query IBM XIV disk arrays, which has a  snmpv2/v3 agent with a buggy bulk support)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eMaxRepetitions\u003c/td\u003e\n\u003ctd\u003eset The MaxRepetitions parameter for BULKWALK SNMP queries\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eCommunity\u003c/td\u003e\n\u003ctd\u003ethe snmp version 2 community\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ev3seclevel\u003c/td\u003e\n\u003ctd\u003e(only for snmpv3) define the level of security needed for the connection valid values are.\u003cbr/\u003e\u003cbr/\u003e\u003cul\u003e\u003cli\u003eNoAuthNoPriv\u003c/li\u003e\u003cli\u003eAuthNoPriv\u003c/li\u003e\u003cli\u003eAuthPriv\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ev3authuser\u003c/td\u003e\n\u003ctd\u003e(snmpv3 only) the username that will establish the snmp query\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ev3authpass\u003c/td\u003e\n\u003ctd\u003e(snmpv3 only) the authentication password\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ev3authprot\u003c/td\u003e\n\u003ctd\u003e(snmpv3 only) the Authentication Protocol  values should be any of \u0026ldquo;MD5\u0026rdquo;, \u0026ldquo;SHA\u0026rdquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ev3privpass\u003c/td\u003e\n\u003ctd\u003e(snmpv3 only) Privacy password\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ev3privprot\u003c/td\u003e\n\u003ctd\u003e(snmpv3 only) Privacy Protocol values should be any of [ \u0026ldquo;DES\u0026rdquo;, \u0026ldquo;AES\u0026rdquo;]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ev3ContextEngineID\u003c/td\u003e\n\u003ctd\u003eSNMPV3 ContextEngineID in ScopedPDU (equivalent to the net-snmp -E paramenter)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ev3ContextName\u003c/td\u003e\n\u003ctd\u003eSNMPV3 ContextName in ScopedPDU ( equivalent to the net-snmp -n parameter)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eFreq\u003c/td\u003e\n\u003ctd\u003eFrequency of polling in seconds ( default 30 sec if not set)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eUpdateFltFreq\u003c/td\u003e\n\u003ctd\u003eNumber pof complete polls that agent will wait before perform snmp table index/filter updates , the final update time will be  Freq*FilterUpdate ( in seconds) Default 60 ( 1h elapsed time)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eConcurrentGather\u003c/td\u003e\n\u003ctd\u003eOpen a new SNMP Connection for each measurement and send concurrent queries over the device.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eData settings\u003c/td\u003e\n\u003ctd\u003eInfluxDB Server\u003c/td\u003e\n\u003ctd\u003elet you select over which database you will send data.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eDeviceTagName\u003c/td\u003e\n\u003ctd\u003eTag name the agent will send to the output db  (default : \u0026ldquo;device\u0026rdquo;), could be any of the other more explicit tagname depending on the device type, context , by example  (router,switch,firewall,dns..etc)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eDeviceTagValue\u003c/td\u003e\n\u003ctd\u003ecould be one of these:\u003cbr\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eid\u003c/strong\u003e: will send as device tag the configured ID for this measurement\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eHost\u003c/strong\u003ewill send as device tag data configured in the Host configuration (name or IP).\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eExtraTags\u003c/td\u003e\n\u003ctd\u003ean array of tags for this device that will be sent on all its measurements.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eOverride Device Vars\u003c/td\u003e\n\u003ctd\u003eList of var catalog to override the default set value\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eMeasurement Groups\u003c/td\u003e\n\u003ctd\u003ean array of Measurement Group ID.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eMeasurement Filters\u003c/td\u003e\n\u003ctd\u003ean array for configured filters\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExtra settings\u003c/td\u003e\n\u003ctd\u003eDescription\u003c/td\u003e\n\u003ctd\u003eadd here all important information over this device\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id="test-connection"\u003eTest Connection\u003c/h3\u003e\n\u003cp\u003eWhen editing or adding a SNMPDevice there is the option to send a query and check its connectivity and send OID queries from already defined components.\u003c/p\u003e\n\u003cp\u003eTo access on the Test Connection Modal, click on \u003ccode\u003eTest Connection\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/TestConnectionModal/config_test_connection_list.JPG" alt="Test Connection Modal"\u003e\u003c/p\u003e\n\u003cp\u003eThe user can select the \u003ccode\u003eOID Source\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/TestConnectionModal/config_test_connection_components.JPG" alt="OID Source"\u003e\u003c/p\u003e\n\u003cp\u003eThe OID related on selected component will load and the user will be able to send query to see those results:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/TestConnectionModal/config_test_connection_oid.JPG" alt="OID Source"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/TestConnectionModal/config_test_connection_result.JPG" alt="OID Source"\u003e\u003c/p\u003e\n\u003ch3 id="filter-connection"\u003eFilter Connection\u003c/h3\u003e\n\u003cp\u003eAs the user is editing or adding a new Device it a Custom Filter can be created directly from its form.\nTo access, click on \u0026ldquo;Filter Connection\u0026rdquo; button and the form will shown up.\u003c/p\u003e\n\u003cp\u003eFor more information, check Component: Custom Filters\u003c/p\u003e\n\u003ch3 id="multi-edit-in-snmp-devices"\u003eMulti edit in SNMP Devices\u003c/h3\u003e\n\u003cp\u003eMulti edit has 3 options: Remove,Change property or Append Property\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eRemove: Allows to remove all the selected items\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChange property: Allows to change the selected property of all the selected items. The properties are the same defined in the configuration.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eProperty\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eOptions/Values\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eActive\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003eTrue /False\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLogLevel\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003ePanic/ Fatal/ Error/ Warning/ Info /Debug\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eConcurrent Gather\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003eTrue /False\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDisable Bulk\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003eTrue /False\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSNMPDebug\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003eTrue /False\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTimeout\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eTime in seconds\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRetries\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eAny number\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFreq\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eAny number in Hz\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMax Repetitions\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eAny number\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDevice Tag Name\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eAny string\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMeasurementGroup\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003eList of all measurement groups\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMeasFilters\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003eList of all the filters\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExtraTags\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eAny tag (string)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003col start="3"\u003e\n\u003cli\u003eAppend Property: Allows to append a new measurement, filter o extra tags in the selected devices.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eProperty\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eOptions/Values\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eMeasurementGroup\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003eList of all measurement groups\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMeasFilters\u003c/td\u003e\n\u003ctd\u003eSelector\u003c/td\u003e\n\u003ctd\u003eList of all the filters\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExtraTags\u003c/td\u003e\n\u003ctd\u003eInput\u003c/td\u003e\n\u003ctd\u003eAny tag (string)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n'},{id:9,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/help/how-to-update/",title:"How to Update",description:"Regularly update the installed npm packages to keep your Doks website stable, usable, and secure.",content:'\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003e💡\u003c/div\u003e\n  \u003cdiv class="w-100"\u003eLearn more about \u003ca href="https://docs.npmjs.com/about-semantic-versioning"\u003esemantic versioning\u003c/a\u003e and \u003ca href="https://docs.npmjs.com/cli/v6/using-npm/semver#advanced-range-syntax"\u003eadvanced range syntax\u003c/a\u003e.\u003c/div\u003e\n\u003c/div\u003e\n\u003ch2 id="update-npm-packages"\u003eUpdate npm packages\u003c/h2\u003e\n\u003cp\u003eBump the versions in the \u003ccode\u003edevDependencies\u003c/code\u003e section of \u003ccode\u003e./package.json\u003c/code\u003e to your liking, and run:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm update\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:10,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:'\u003ch2 id="problems-updating-npm-packages"\u003eProblems updating npm packages\u003c/h2\u003e\n\u003cp\u003eDelete the \u003ccode\u003e./node_modules\u003c/code\u003e folder, and run again:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm install\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="problems-with-cache"\u003eProblems with cache\u003c/h2\u003e\n\u003cp\u003eDelete the temporary directories:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run clean\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:11,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:'\u003ch2 id="hyas"\u003eHyas?\u003c/h2\u003e\n\u003cp\u003eDoks is a \u003ca href="https://gethyas.com/themes/doks/"\u003eHyas theme\u003c/a\u003e build by the creator of Hyas.\u003c/p\u003e\n\u003ch2 id="footer-notice"\u003eFooter notice?\u003c/h2\u003e\n\u003cp\u003ePlease keep it in place.\u003c/p\u003e\n\u003ch2 id="keyboard-shortcuts-for-search"\u003eKeyboard shortcuts for search?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003efocus: \u003ccode\u003e/\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eselect: \u003ccode\u003e↓\u003c/code\u003e and \u003ccode\u003e↑\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eopen: \u003ccode\u003eEnter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eclose: \u003ccode\u003eEsc\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="other-documentation"\u003eOther documentation?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://docs.netlify.com/"\u003eNetlify\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://gohugo.io/documentation/"\u003eHugo\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="can-i-get-support"\u003eCan I get support?\u003c/h2\u003e\n\u003cp\u003eCreate a topic:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://community.netlify.com/"\u003eNetlify Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://discourse.gohugo.io/"\u003eHugo Forums\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="contact-the-creator"\u003eContact the creator?\u003c/h2\u003e\n\u003cp\u003eSend \u003ccode\u003eh-enk\u003c/code\u003e a message:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://community.netlify.com/"\u003eNetlify Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://discourse.gohugo.io/"\u003eHugo Forums\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:12,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/prologue/introduction/",title:"Introduction",description:"Doks is a Hugo theme helping you build modern documentation websites that are secure, fast, and SEO-ready — by default.",content:'\u003ch2 id="get-started"\u003eGet started\u003c/h2\u003e\n\u003cp\u003eThere are two main ways to get started with Doks:\u003c/p\u003e\n\u003ch3 id="tutorial"\u003eTutorial\u003c/h3\u003e\n\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003e👉\u003c/div\u003e\n  \u003cdiv class="w-100"\u003eThe Tutorial is intended for novice to intermediate users.\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003eStep-by-step instructions on how to start a new Doks project. \u003ca href="https://getdoks.org/tutorial/introduction/"\u003eTutorial →\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id="quick-start"\u003eQuick Start\u003c/h3\u003e\n\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003e👉\u003c/div\u003e\n  \u003cdiv class="w-100"\u003eThe Quick Start is intended for intermediate to advanced users.\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003eOne page summary of how to start a new Doks project. \u003ca href="toni-moreno.github.io/snmpcollector.org/docs/prologue/quick-start/"\u003eQuick Start →\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="go-further"\u003eGo further\u003c/h2\u003e\n\u003cp\u003eRecipes, Reference Guides, Extensions, and Showcase.\u003c/p\u003e\n\u003ch3 id="recipes"\u003eRecipes\u003c/h3\u003e\n\u003cp\u003eGet instructions on how to accomplish common tasks with Doks. \u003ca href="https://getdoks.org/docs/recipes/project-configuration/"\u003eRecipes →\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id="reference-guides"\u003eReference Guides\u003c/h3\u003e\n\u003cp\u003eLearn how to customize Doks to fully make it your own. \u003ca href="https://getdoks.org/docs/reference-guides/security/"\u003eReference Guides →\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id="extensions"\u003eExtensions\u003c/h3\u003e\n\u003cp\u003eGet instructions on how to add even more to Doks. \u003ca href="https://getdoks.org/docs/extensions/add-google-fonts/"\u003eExtensions →\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id="showcase"\u003eShowcase\u003c/h3\u003e\n\u003cp\u003eSee what others have build with Doks. \u003ca href="https://getdoks.org/showcase/parietal-numerics-documentation/"\u003eShowcase →\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="contributing"\u003eContributing\u003c/h2\u003e\n\u003cp\u003eFind out how to contribute to Doks. \u003ca href="https://getdoks.org/docs/contributing/how-to-contribute/"\u003eContributing →\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="help"\u003eHelp\u003c/h2\u003e\n\u003cp\u003eGet help on Doks. \u003ca href="toni-moreno.github.io/snmpcollector.org/docs/help/how-to-update/"\u003eHelp →\u003c/a\u003e\u003c/p\u003e\n'},{id:13,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/prologue/quick-start/",title:"Quick Start",description:"One page summary of how to start a new Doks project.",content:'\u003ch2 id="requirements"\u003eRequirements\u003c/h2\u003e\n\u003cp\u003eDoks uses npm to install dependencies and run commands. Installing npm is pretty simple. Download and install \u003ca href="https://nodejs.org/"\u003eNode.js\u003c/a\u003e (it includes npm) for your platform.\u003c/p\u003e\n\u003ch2 id="start-a-new-doks-project"\u003eStart a new Doks project\u003c/h2\u003e\n\u003cp\u003eCreate a new site, change directories, install dependencies, and start development server.\u003c/p\u003e\n\u003ch3 id="create-a-new-site"\u003eCreate a new site\u003c/h3\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003egit clone https://github.com/h-enk/doks.git my-doks-site\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="change-directories"\u003eChange directories\u003c/h3\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003ecd my-doks-site\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="install-dependencies"\u003eInstall dependencies\u003c/h3\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm install\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="start-development-server"\u003eStart development server\u003c/h3\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run start\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDoks will start the Hugo development webserver accessible by default at \u003ccode\u003ehttp://localhost:1313\u003c/code\u003e. Saved changes will live reload in the browser.\u003c/p\u003e\n\u003ch2 id="other-commands"\u003eOther commands\u003c/h2\u003e\n\u003cp\u003eDoks comes with commands for common tasks. \u003ca href="toni-moreno.github.io/snmpcollector.org/docs/prologue/commands/"\u003eCommands →\u003c/a\u003e\u003c/p\u003e\n'},{id:14,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/prologue/commands/",title:"Commands",description:"Doks comes with commands for common tasks.",content:'\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003e💡\u003c/div\u003e\n  \u003cdiv class="w-100"\u003eYou can change the commands in the scripts section of `./package.json`.\u003c/div\u003e\n\u003c/div\u003e\n\u003ch2 id="start"\u003estart\u003c/h2\u003e\n\u003cp\u003eStart local development server:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run start\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="lint"\u003elint\u003c/h2\u003e\n\u003cp\u003eCheck scripts, styles, and markdown for errors:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run lint\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="scripts"\u003escripts\u003c/h3\u003e\n\u003cp\u003eCheck scripts for errors:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run lint:scripts [-- --fix]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="styles"\u003estyles\u003c/h3\u003e\n\u003cp\u003eCheck styles for errors:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run lint:styles [-- --fix]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="markdown"\u003emarkdown\u003c/h3\u003e\n\u003cp\u003eCheck markdown for errors:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run lint:markdown [-- --fix]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="clean"\u003eclean\u003c/h2\u003e\n\u003cp\u003eDelete temporary directories:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run clean\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="build"\u003ebuild\u003c/h2\u003e\n\u003cp\u003eBuild production website:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run build\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="functions"\u003efunctions\u003c/h3\u003e\n\u003cp\u003eBuild Lambda functions:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run build:functions\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="preview"\u003epreview\u003c/h3\u003e\n\u003cp\u003eBuild production website including draft and future content:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class="language-bash"\u003enpm run build:preview\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:15,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/runtime/runtime/",title:"Runtime",description:"Runtime Options.",content:'\u003cp\u003eSNMPCollector has an embedded online device state and data measurement viewer, which help us to monitor how data has been gathered for each device.\nOn the device list you will see if device is active \u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Runtime/active_button.JPG" alt="devactive"\u003e or have been stoped \u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Runtime/desactived_button.JPG" alt="devnotactive"\u003e by the administrator. You can also see if there is any connectivity problems \u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Runtime/notConnected_button.JPG" alt="notconnected"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Runtime/runtime_device_listt.JPG" alt="Device List"\u003e\u003c/p\u003e\n\u003ch2 id="system-description"\u003eSystem description\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Runtime/runtime_device_info_operations.JPG" alt="Host Info"\u003e\u003c/p\u003e\n\u003ch2 id="runtime-operations"\u003eRuntime Operations\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eOperation\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSNMP State\u003c/td\u003e\n\u003ctd\u003eEnable or disable online the selected SNMP Device\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eForce Gather\u003c/td\u003e\n\u003ctd\u003eExecute a Complete Gathering process,  useful for testing on not active devices or force again\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSNMP Debug\u003c/td\u003e\n\u003ctd\u003eEnable or disable SNMP Debugging\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLog Level\u003c/td\u003e\n\u003ctd\u003eChange Log level online\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eForce Flt Update\u003c/td\u003e\n\u003ctd\u003eForce filter update on the next poll\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDownload Log File\u003c/td\u003e\n\u003ctd\u003eDownload the log file related with device\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eForce SNMP Reset (soft)\u003c/td\u003e\n\u003ctd\u003eonly restarts snmp connection for current established measurements and  with current indexed states an filter states.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eForce SNMP Reset (hard)\u003c/td\u003e\n\u003ctd\u003estop all snmp communications and restart them again, remap again all measurement map, indexes in the same way a restart is done.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id="measurement-online-data"\u003eMeasurement online data\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Runtime/runtime_device_measurement_data_explorer.JPG" alt="Meas Online data"\u003e\u003c/p\u003e\n\u003cp\u003eTooltip detail of one metric:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Runtime/runtime_metric_definition_info.JPG" alt="Meas Detailed Info"\u003e\u003c/p\u003e\n\u003cp\u003eTooltip detail of one metric value:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Runtime/runtime_device_data_tooltip_detail.JPG" alt="Meas Detailed Info"\u003e\u003c/p\u003e\n'},{id:16,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/examples/",title:"Examples",description:"Examples",content:""},{id:17,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/help/",title:"Help",description:"Help Doks.",content:""},{id:18,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/components/",title:"Components",description:"Prologue Doks.",content:""},{id:19,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""},{id:20,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/",title:"Docs",description:"Docs Doks.",content:""},{id:21,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/data-management/export/",title:"",description:null,content:'\u003ch1 id="exporting-a-file"\u003eEXPORTING A FILE\u003c/h1\u003e\n\u003cp\u003eTo export a file the option \u0026ldquo;Export data\u0026rdquo; in the menu will be used.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/DataManagement/import-export-select.jpg" alt="Menu export"\u003e\u003c/p\u003e\n\u003cp\u003eThis option allows the user to select different files to export. The steps will be the following:\u003c/p\u003e\n\u003ch2 id="1-select-type"\u003e1. Select type:\u003c/h2\u003e\n\u003cp\u003eThe user can select one type at the same time of the following options:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/DataManagement/export-file-1.jpg" alt="Imagen select type"\u003e\u003c/p\u003e\n\u003ch2 id="2-select-items-of-type"\u003e2. Select Items of type:\u003c/h2\u003e\n\u003cp\u003eThe user can select one or more items of the selected type and click on the arrow to add them to the exported file.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/DataManagement/export-file-2.jpg" alt="Imagen select items type"\u003e\u003c/p\u003e\n\u003ch2 id="3-items-ready-to-export"\u003e3. Items ready to export:\u003c/h2\u003e\n\u003cp\u003eAll the selected files will be shown in the menu. The user can select other types, like the selected in step 1, to add more files.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/DataManagement/export-file-3.jpg" alt="Imagen ready to export"\u003e\u003c/p\u003e\n\u003cp\u003eThe recursive option allows the user to select one field and export all their children associated\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eExample of recursive option:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe have defined the measurement linux_cpu with 4 metricss. If we use the recursive option when we select linux_cpu we will export all the childrens with it.\u003c/p\u003e\n\u003cp\u003eThe following tree is how it works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elinux_cpu\n│   linux_cpu_used_percent\n│   linux_cpu_idle_percent\n│   linux_cpu_system_percent\n│   linux_cpu_user_percent\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd this is the result we obtain when we export the file at the end:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/DataManagement/recursive.jpg" alt="Img recursive"\u003e\u003c/p\u003e\n\u003ch2 id="4-export"\u003e4. Export:\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/DataManagement/export-file-4.jpg" alt="Imagen final expoort"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026lsquo;Tags\u0026rsquo; field is used to identify the exported data\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:22,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/data-management/import/",title:"",description:null,content:'\u003ch1 id="importing-a-file"\u003eIMPORTING A FILE\u003c/h1\u003e\n\u003cp\u003eTo import a file the option \u0026ldquo;Import\u0026rdquo; in the menu will be used.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/DataManagement/import-export-select.jpg" alt="Menu import"\u003e\u003c/p\u003e\n\u003cp\u003eThis option allows the user to select a file ( in this case a JSON file) and select two options:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/DataManagement/import-file.jpg" alt="Import file"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAutoRename -\u0026gt; It allows to change the name of the file, is useful if u want to copy a device, measurement, etc and rename it.\u003c/li\u003e\n\u003cli\u003eOverwrite -\u0026gt; It allows to overwrite the current file in the SNMP collector with the same name as the imported file.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy default both options are false.\u003c/p\u003e\n\u003cp\u003eIf one of the options is true, the other will be locked.\u003c/p\u003e\n'},{id:23,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/examples/example-cisco-qos/",title:"",description:null,content:'\u003c!--TS --\u003e\n\u003c!-- END --\u003e\n\u003ch1 id="example-retrieve-metrics-from-cisco-qos---cisco-class-based-qos-mib"\u003eExample: Retrieve metrics from Cisco QoS - CISCO-CLASS-BASED-QOS-MIB\u003c/h1\u003e\n\u003cp\u003eThis example will show up how to retrieve QoS metrics from a Cisco Device, based on one of the most complex MIB - \u003ccode\u003eCISCO-CLASS-BASED-QOS-MIB\u003c/code\u003e\n\u003cstrong\u003eOnly valid on 0.9\u003c/strong\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id="table-of-contents"\u003eTable of contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e0 Prerequisites : What and from we are going to collect our data?\n\u003cul\u003e\n\u003cli\u003e0.1 SNMP Device model\u003c/li\u003e\n\u003cli\u003e0.2 Select metrics to collect data\n\u003cul\u003e\n\u003cli\u003e0.2.1 Available object tables\u003c/li\u003e\n\u003cli\u003e0.2.2 Objects identifiers\u003c/li\u003e\n\u003cli\u003e0.2.3 Tags - Indexes definition\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e0.3 Measurements\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e1 CMStats\n\u003cul\u003e\n\u003cli\u003e1.1 Configuring metrics\u003c/li\u003e\n\u003cli\u003e1.2 Configuring measurements\n\u003cul\u003e\n\u003cli\u003e1.2.1 Overview\u003c/li\u003e\n\u003cli\u003e1.2.2 Index 0 | Service Policy Index Tag: cbQosIfIndex\u003c/li\u003e\n\u003cli\u003e1.2.3 Index 1 | Service Policy Index Tag: cbQosPolicyDirection\u003c/li\u003e\n\u003cli\u003e1.2.4 Index 2 | ClassMap Tag: cbQosCMName\u003c/li\u003e\n\u003cli\u003e1.2.5 Index 3 | PolicyName Tag: cbQosPolicyMapName\u003c/li\u003e\n\u003cli\u003e1.2.6 Index 4 | ClassMap Tag: cbQosCMInfo\u003c/li\u003e\n\u003cli\u003e1.2.7 Result\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e1.3 Configuring filters\n\u003cul\u003e\n\u003cli\u003e1.3.1 OID Condition - Filter classmap\u003c/li\u003e\n\u003cli\u003e1.3.2 MeasurementFilter - Filter classmap\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e1.4 Configuring Measurement Group\u003c/li\u003e\n\u003cli\u003e1.5 Configuring Device\u003c/li\u003e\n\u003cli\u003e1.6 Reload configuration\u003c/li\u003e\n\u003cli\u003e1.7 Check your results!\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2 TSStats\n\u003cul\u003e\n\u003cli\u003e2.1 Configuring metrics\u003c/li\u003e\n\u003cli\u003e1.2 Configuring measurements\n\u003cul\u003e\n\u003cli\u003e1.2.1 Overview\u003c/li\u003e\n\u003cli\u003e2.2.2 Index 0 | Service Policy Index Tag: cbQosIfIndex\u003c/li\u003e\n\u003cli\u003e2.2.3 Index 1 | Service Policy Index Tag: cbQosPolicyDirection\u003c/li\u003e\n\u003cli\u003e2.2.4 Index 2 | ClassMap Tag: cbQosCMName\u003c/li\u003e\n\u003cli\u003e2.2.4 Index 3 | PolicyMap Tag: policyMapName\u003c/li\u003e\n\u003cli\u003e2.2.4 Result\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2.3 Configuring filters\n\u003cul\u003e\n\u003cli\u003e2.3.1 OID Condition - Filter TS\u003c/li\u003e\n\u003cli\u003e2.3.2 MeasurementFilter - Filter classmap\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2.4 Configuring Measurement Group\u003c/li\u003e\n\u003cli\u003e2.5 Configuring Device\u003c/li\u003e\n\u003cli\u003e2.6 Reload configuration\u003c/li\u003e\n\u003cli\u003e2.7 Check your results!\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id="0-prerequisites--what-and-from-we-are-going-to-collect-our-data"\u003e0. Prerequisites : What and from we are going to collect our data?\u003c/h2\u003e\n\u003ch3 id="01-snmp-device-model"\u003e0.1 SNMP Device model\u003c/h3\u003e\n\u003cp\u003eIn order to select the correct metrics for our device, we must check first what model it is.\nIf you don\u0026rsquo;t know the model, you can pre-add the device on SNMP Device Component and do a test connection. To do that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClick on \u003ccode\u003eSNMP Device\u003c/code\u003e menu item\u003c/li\u003e\n\u003cli\u003eA table with configured devices will show up. Press \u0026ldquo;New\u0026rdquo; button or edit an existing one to access to the configuration form.\u003c/li\u003e\n\u003cli\u003eFill the device with the basic connection information\u003c/li\u003e\n\u003cli\u003eIf everything is OK, you will be able to do a \u0026ldquo;Test Connection\u0026rdquo;. This button will show up a console with System information  of the Device.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="02-select-metrics-to-collect-data"\u003e0.2 Select metrics to collect data\u003c/h3\u003e\n\u003cp\u003eTo define the metrics to retrieve data from we need first to analyze how CISCO-CLASS-BASED-QOS-MIB works\nI will use the example exposed on: https://blog.pierky.com/cisco-class-based-qos-snmp-mib-and-statistics-monitor-for-nms/ as it will help to underestand a real case\u003c/p\u003e\n\u003ch4 id="021-available-object-tables"\u003e0.2.1 Available object tables\u003c/h4\u003e\n\u003cp\u003eIn \u003ccode\u003eCISCO-CLASS-BASED-QOS-MIB\u003c/code\u003e the tables are defined by each kind of object that is available to be configured on QoS.\nEach object has a \u003cstrong\u003eCFG Table\u003c/strong\u003e that shows config information and \u003cstrong\u003eStatsTable\u003c/strong\u003e with the available metrics to retrieve data from.\u003c/p\u003e\n\u003cp\u003eOn this example, we will work over the following objects and tables:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eObject\u003c/th\u003e\n\u003cth\u003eCFG Table\u003c/th\u003e\n\u003cth\u003eStats Table\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ePolicy Map\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ecbQosPolicyMapCfg - 1.3.6.1.4.1.9.9.166.1.6.1.1\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eClassMap\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ecbQosClassMapCfg - 1.3.6.1.4.1.9.9.166.1.7.1.1\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ecbQosCMStatsTable - 1.3.6.1.4.1.9.9.166.1.15.1.1\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMatchStmt\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ecbQosMatchStmtCfg - 1.3.6.1.4.1.9.9.166.1.8.1.1\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ecbQosMatchStmtStats -  1.3.6.1.4.1.9.9.166.1.16.1.1\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTS\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ecbQosTSCfg - 1.3.6.1.4.1.9.9.166.1.13.1.1\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ecbQosTSStats - 1.3.6.1.4.1.9.9.166.1.19\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ QoS objets table\n\u003c/p\u003e\n\u003cp\u003eAs PolicyMap doesn\u0026rsquo;t have stats on itself, we will cover in this example how to retrieve data from:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClassMap Object\u003c/li\u003e\n\u003cli\u003eTS Object\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="022-objects-identifiers"\u003e0.2.2 Objects identifiers\u003c/h4\u003e\n\u003cp\u003eOnce we have decided objects to retrieve data from, we need to check how to identify each metrics and what tags do we need\u003c/p\u003e\n\u003cp\u003eThe tree hierarchy of QoS follows as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eInterface \n| - Direction\n| - PolicyMap\n    |- ClassMap\n      |- MatchStmt\n      |- TS\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, the deeper object is, more tags we will need to retrieve in order to be able to identify it:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eObject\u003c/th\u003e\n\u003cth\u003eTags needed\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ePolicyMap\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eInterface, Direction, PolicyMap\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eClassMap\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eInterface, Direction, PolicyMap, ClassMap\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMatchStmt\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eInterface, Direction, PolicyMap, ClassMap, MatchStmt\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTS\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eInterface, Direction, PolicyMap, ClassMap, MatchStmt\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ QoS objets table-tags relation\n\u003c/p\u003e\n\u003ch4 id="023-tags---indexes-definition"\u003e0.2.3 Tags - Indexes definition\u003c/h4\u003e\n\u003cp\u003eEach object defined on XXXXStatsTable and XXXXCfg tables have a double index.\nIn order to reference them to the document, lets identify and name them:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eBase\u003c/th\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eXXX\u003c/strong\u003e.YYY\u003c/td\u003e\n\u003ctd\u003eXXX\u003c/td\u003e\n\u003ctd\u003eService Policy Index\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eXXX.\u003cstrong\u003eYYY\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eYYY\u003c/td\u003e\n\u003ctd\u003eObject Index\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Index definition\n\u003c/p\u003e\n\u003ch3 id="03-measurements"\u003e0.3 Measurements\u003c/h3\u003e\n\u003cp\u003eAs we have seen, each object needs specific tags to identify those metrics and, based on that they are double indexed, we will create a single measurement to retrieve each object stats\u003c/p\u003e\n\u003ch1 id="1-cmstats"\u003e1. CMStats\u003c/h1\u003e\n\u003cp\u003eThe first set of data that we want to retrieve are the CMStats\u003c/p\u003e\n\u003ch2 id="11-configuring-metrics"\u003e1.1 Configuring metrics\u003c/h2\u003e\n\u003cp\u003eAvailable metrics are defined on \u003ccode\u003ecbQosCMStatsTable - 1.3.6.1.4.1.9.9.166.1.15.1.1\u003c/code\u003e.\nIn our example we will configure the following metrics:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eField Name\u003c/th\u003e\n\u003cth\u003eIsTag\u003c/th\u003e\n\u003cth\u003eDataSrcType\u003c/th\u003e\n\u003cth\u003eGetRate\u003c/th\u003e\n\u003cth\u003eBase OID/Extradata\u003c/th\u003e\n\u003cth\u003eScale\u003c/th\u003e\n\u003cth\u003eShift\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ecisco_cbQosCMPrePolicyPkt64\u003c/td\u003e\n\u003ctd\u003ecbQosCMPrePolicyPkt64\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.15.1.1.3\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecisco_cbQosCMPrePolicyByte64\u003c/td\u003e\n\u003ctd\u003ecbQosCMPrePolicyByte64\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.15.1.1.6\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecisco_cbQosCMPrePolicyBitRate\u003c/td\u003e\n\u003ctd\u003ecbQosCMPrePolicyBitRate\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eGauge32\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.15.1.1.7\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ QoS CMStats metrics configuration\n\u003c/p\u003e\n\u003cp\u003eAs we have said, each metric will have a double index: \u003ccode\u003e[Service Policy Index].[Object Index]\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id="12-configuring-measurements"\u003e1.2 Configuring measurements\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s start to define the measurement\u003c/p\u003e\n\u003ch3 id="121-overview"\u003e1.2.1 Overview\u003c/h3\u003e\n\u003cp\u003eAs we have defined, the CMStats needs the following tags to identify each metric:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInterface\u003c/li\u003e\n\u003cli\u003eDirection\u003c/li\u003e\n\u003cli\u003ePolicyMap Name\u003c/li\u003e\n\u003cli\u003eClassMap Name\u003c/li\u003e\n\u003cli\u003e[Extra] ClassMap Info\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe main problem here is that each tag is being retrieved with \u003cstrong\u003edifferent indexes and different indexes dimension\u003c/strong\u003e, so in order to correlate those tags and indexes we need to define a \u003cstrong\u003eMulti Index Measurement\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eTo do that, go to \u003ccode\u003eInflux Measurements\u003c/code\u003e section and click on \u003ccode\u003e+New\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eFill the \u003ccode\u003eID\u003c/code\u003e and \u003ccode\u003eName\u003c/code\u003e fields with:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003ecisco_qos_cbQosCMStats\u003c/td\u003e\n\u003ctd\u003eUnique SNMPCollector internal identifier of measurement\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eName\u003c/td\u003e\n\u003ctd\u003ecbQosCMStats\u003c/td\u003e\n\u003ctd\u003eMeasurement name that will be used on InfluxDB\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Measurement config section\n\u003c/p\u003e\n\u003cp\u003eOn the \u003ccode\u003eGetMode\u003c/code\u003e field select:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eGetMode\u003c/td\u003e\n\u003ctd\u003e(snmp Table) Multiple indexes\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Measurement get mode\n\u003c/p\u003e\n\u003ch3 id="122-index-0--service-policy-index-tag-cbqosifindex"\u003e1.2.2 Index 0 | Service Policy Index Tag: cbQosIfIndex\u003c/h3\u003e\n\u003cp\u003eThe first that we need to retrieve are interface related tags, name and direction.\nAccording to documentation, we need to poll the following OIDs to retrieve those tags:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003cth\u003eOID\u003c/th\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ecbQosIfIndex\u003c/td\u003e\n\u003ctd\u003e1.3.6.1.4.1.9.9.166.1.1.1.1.4\u003c/td\u003e\n\u003ctd\u003eService Policy\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Service policy index\n\u003c/p\u003e\n\u003cp\u003eA simple walk on this OID gives as value the \u003ccode\u003eifIndex\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e\u0026gt; cbQosIfIndex: 1.3.6.1.4.1.9.9.166.1.1.1.1.4\n\n1.3.6.1.4.1.9.9.166.1.1.1.1.4[.1043] = INTEGER: 1\n1.3.6.1.4.1.9.9.166.1.1.1.1.4[.1099] = INTEGER: 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that the \u003ccode\u003e[.1043]\u003c/code\u003e and \u003ccode\u003e[.1099]\u003c/code\u003e will be used on the following indexes definition as \u003ccode\u003eService Policy Index\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe value of \u003ccode\u003e1\u003c/code\u003e is the ifIndex index, so, if we retrieve data from ifName using that index we will be able to retrieve the related ifName of the interface:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e\u0026gt; ifName: 1.3.6.1.2.1.31.1.1.1.1\n\n1.3.6.1.2.1.31.1.1.1.1[.1] = \u0026quot;Te1/0/3\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs we have an indirect tag, we will create an index with \u003cstrong\u003e\u0026quot;(snmp Table) Indexed with indirect Tag\u0026quot;\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e![mi-indexed_it]\u003c/p\u003e\n\u003cp\u003eAnd will fill with the following fields:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Label\u003c/td\u003e\n\u003ctd\u003ecbQosIfIndex\u003c/td\u003e\n\u003ctd\u003eUnique SNMPCollector internal identifier of measurement\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Description\u003c/td\u003e\n\u003ctd\u003eIndex to retrieve interface name from cbQosIfIndex\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Base OID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.1.1.1.4\u003c/td\u003e\n\u003ctd\u003eBase OID is the cbQosIfIndex which gives us the value of the ifMIB index\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag OID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.1\u003c/td\u003e\n\u003ctd\u003eifName TagOID that will match with cbQosIfIndex result\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag\u003c/td\u003e\n\u003ctd\u003eifName\u003c/td\u003e\n\u003ctd\u003eWe will use directly the name of the field that is being retrieved, but you can set whatever you want as your Tag Key\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag Format\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003eWe don\u0026rsquo;t need to format the ifName tag, but you are free to set up whatever you want!\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Dependency\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003eWe don\u0026rsquo;t need a dependency as it will be the first OID to retrieve tag from\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Index 0 - cbQosIfIndex\n\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob//gh-pages/images/webUI/Examples/QoS/cbqosifindex_meas.jpg" alt="cbqosifindex_meas" title="example of index dfefinition of cbqosifIndex"\u003e\u003c/p\u003e\n\u003cp\u003eThe final output map of pairs [index]:[tag] will be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e\u0026gt; Index: IDX{0} | cbQosIfIndex\n\n[.1043] = \u0026quot;Te1/0/3\u0026quot; || ifName\n[.1099] = \u0026quot;Te1/0/3\u0026quot; || ifName\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="123-index-1--service-policy-index-tag-cbqospolicydirection"\u003e1.2.3 Index 1 | Service Policy Index Tag: cbQosPolicyDirection\u003c/h3\u003e\n\u003cp\u003eOnce we have the inferface name, we can get the direction of the applied policy on each interface, in order to retrieve that we can query the following OID that gives us the direction.\nNote that the index keeps only in 1 dimension and it is related with the \u003ccode\u003eService Policy Index\u003c/code\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003cth\u003eOID\u003c/th\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ecbQosPolicyDirection\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.1.1.1.3\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eService Policy Index\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eA simple walk on this OID gives the direction of the policy applied on an interface\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e\u0026gt; cbQosPolicyDirection:  \n\n.1.3.6.1.4.1.9.9.166.1.1.1.1.3[.1043] = INTEGER: output(2)\n.1.3.6.1.4.1.9.9.166.1.1.1.1.3[.1099] = INTEGER: input(1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this case, we don\u0026rsquo;t need to do an indirection, as it is giving directly the value of the tag, so we can use a \u003cstrong\u003e\u0026quot;(snmp Table) Index with direct TAG\u0026quot;\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e![mi-indexed]\u003c/p\u003e\n\u003cp\u003eAs we can see, the indexes are also [.1043] and [.1099] - \u003ccode\u003eService Policy Index\u003c/code\u003e and they are shared with the \u003ccode\u003eIDX{0}\u003c/code\u003e, the \u003ccode\u003ecbQosIfIndex\u003c/code\u003e index\u003c/p\u003e\n\u003cp\u003eWe will fill the index with the following field/values:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Label\u003c/td\u003e\n\u003ctd\u003ecbQosPolicyDirection\u003c/td\u003e\n\u003ctd\u003eUnique SNMPCollector internal identifier of measurement\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Description\u003c/td\u003e\n\u003ctd\u003eIndex to retrieve interface name from cbQosPolicyDirection\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Base OID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.1.1.1.3\u003c/td\u003e\n\u003ctd\u003eBase OID is the cbQosPolicyDirection which gives us the value of the direction\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag\u003c/td\u003e\n\u003ctd\u003epolicyDirection\u003c/td\u003e\n\u003ctd\u003eWe will use directly the name of the field that is being retrieved, but you can set whatever you want as your Tag Key\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag Format\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003eWe don\u0026rsquo;t need to format the policyDirection tag, but you are free to set up whatever you want!\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Dependency\u003c/td\u003e\n\u003ctd\u003eIDX{0};DOT[0:0];SKIP\u003c/td\u003e\n\u003ctd\u003e(*)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Index 1 - cbQosPolicyDirection\n\u003c/p\u003e\n\u003cp\u003e(*) Dependency:\u003c/p\u003e\n\u003cp\u003eWe set up a dependency with the IDX{0}, as they shares the same Index in order to heridate ifIndex Tags. We will use a SKIP strategy\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Examples/QoS/cbqospolicydirection_meas.jpg" alt="cbqospolicydirection_meas" title="example of definition of cbqospolicydirection"\u003e\u003c/p\u003e\n\u003cp\u003eAt this point, we will have that the \u003ccode\u003eIDX{1}\u003c/code\u003e will be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; Index: IDX{0} | cbQosIfIndex\n\n[.1043] = \u0026quot;Te1/0/3\u0026quot; || ifName\n[.1099] = \u0026quot;Te1/0/3\u0026quot; || ifName\n\n\u0026gt; Index: IDX{1} | cbQosPolicyDirection | IDX{0};DOT[0:0];SKIP\n\n[.1043] = \u0026quot;Te1/0/3|2\u0026quot; || ifName | policyDirection\n[.1099] = \u0026quot;Te1/0/3|1\u0026quot; || ifName | policyDirection\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe just finished to map the first index \u003ccode\u003eService Policy Index\u003c/code\u003e and feed it with \u003ccode\u003eifName\u003c/code\u003e and \u003ccode\u003epolicyDirection\u003c/code\u003e tags\u003c/p\u003e\n\u003ch3 id="124-index-2--classmap-tag-cbqoscmname"\u003e1.2.4 Index 2 | ClassMap Tag: cbQosCMName\u003c/h3\u003e\n\u003cp\u003eOn this point, we are going to retrieve the ClassMap name. Despite of the above indexes, the table to retrieve the class map name has now a \u003cstrong\u003edouble index\u003c/strong\u003e: \u003ccode\u003eService Policy\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eTo retrieve values from CFG tables, the MIB provides an OID to get the index reference to the object, which it has to be retrieved from \u003ccode\u003ecbQosConfigIndex - .1.3.6.1.4.1.9.9.166.1.5.1.1.2\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eA walk over the cbQosConfigIndex:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosConfigIndex - .1.3.6.1.4.1.9.9.166.1.5.1.1.2\n\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1043] = Gauge32: 1035\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1045] = Gauge32: 1029\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1047] = Gauge32: 1033\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1049] = Gauge32: 1037\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1051] = Gauge32: 1025\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1053] = Gauge32: 1027\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1085] = Gauge32: 1079\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1099][.1099] = Gauge32: 1063\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1099][.1101] = Gauge32: 1057\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1099][.1103] = Gauge32: 1061\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1099][.1105] = Gauge32: 1065\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1099][.1107] = Gauge32: 1025\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1099][.1109] = Gauge32: 1027\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe name of the classmaps comes from the table: \u003ccode\u003ecbQosCMName - .1.3.6.1.4.1.9.9.166.1.7.1.1.1\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eA walk over the \u003ccode\u003ecbQosCMName\u003c/code\u003e table:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosCMName - .1.3.6.1.4.1.9.9.166.1.7.1.1.1\n\n.1.3.6.1.4.1.9.9.166.1.7.1.1.1[.1025] = STRING: class-default\n.1.3.6.1.4.1.9.9.166.1.7.1.1.1[.1029] = STRING: ICMP\n.1.3.6.1.4.1.9.9.166.1.7.1.1.1[.1057] = STRING: NonLocal\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that the index is directly the one recieved from cbQosConfigIndex:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosConfigIndex (filtered) - .1.3.6.1.4.1.9.9.166.1.5.1.1.2\n\n...\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1045] = Gauge32: 1029\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1051] = Gauge32: 1025\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1099][.1101] = Gauge32: 1057\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs we have said, the first index references to the \u003ccode\u003eService Policy Index\u003c/code\u003e and the second index refers directly to the \u003ccode\u003eObject Index\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAs we have an indirect tag, we will create an index with \u003cstrong\u003e\u0026quot;(snmp Table) Indexed with indirect Tag\u0026quot;\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e![mi-indexed_it]\u003c/p\u003e\n\u003cp\u003eWe will fill with the following field/values:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Label\u003c/td\u003e\n\u003ctd\u003ecbQosCMName\u003c/td\u003e\n\u003ctd\u003eUnique SNMPCollector internal identifier of measurement\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Description\u003c/td\u003e\n\u003ctd\u003eIndex to retrieve CMName\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Base OID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.5.1.1.2\u003c/td\u003e\n\u003ctd\u003eBase OID is the \u003ccode\u003ecbQosConfigIndex\u003c/code\u003e which gives us the value of the config related with cbQosCMName table\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag OID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.7.1.1.1\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ecbQosCMName\u003c/code\u003e TagOID that will match with \u003ccode\u003ecbQosConfigIndex\u003c/code\u003e result\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag\u003c/td\u003e\n\u003ctd\u003ecmName\u003c/td\u003e\n\u003ctd\u003eWe will use directly the name of the field that is being retrieved, but you can set whatever you want as your Tag Key\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag Format\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003eWe don\u0026rsquo;t need to format the policyDirection tag, but you are free to set up whatever you want!\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Dependency\u003c/td\u003e\n\u003ctd\u003eIDX{1};DOT[0:0];SKIP\u003c/td\u003e\n\u003ctd\u003e(*)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Index 2 - cbQosCMName\n\u003c/p\u003e\n\u003cp\u003e(*) Dependency\u003c/p\u003e\n\u003cp\u003eThe dependency in ths case is based on \u003ccode\u003eIDX{1}\u003c/code\u003e - cbQosPolicyDirection that already have ifName tag.\nIn this case, the metrics have indexes with dimension 2, so we need to change the check condition based only on the first index, the \u003ccode\u003eService Policy Index\u003c/code\u003e, using the statement \u003ccode\u003eDOT[0:0]\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Examples/QoS/cbqoscmname_meas.jpg" alt="cbqoscmname_meas" title="example of definition of cbQosCMName index"\u003e\u003c/p\u003e\n\u003cp\u003eAt this point, we will have that the \u003ccode\u003eIDX{1}\u003c/code\u003e will be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026gt; IDX{1}:\n\n[.1043] = \u0026quot;Te1/0/3|2\u0026quot; || ifName | policyDirection\n[.1099] = \u0026quot;Te1/0/3|1\u0026quot; || ifName | policyDirection\n\n\u0026gt; Index: IDX{2} | cbQosCMName | IDX{1};DOT[0:0];SKIP\n\n\u0026gt;\u0026gt; DOT[0:0] = [.1043] / [.1099]\n\n[.1043][.1045] = \u0026quot;Te1/0/3|2|ICMP\u0026quot;           || ifName | policyDirection | cmName\n[.1043][.1051] = \u0026quot;Te1/0/3|2|class-default\u0026quot;  || ifName | policyDirection | cmName\n[.1099][.1101] = \u0026quot;Te1/0/3|1|NonLocal\u0026quot;       || ifName | policyDirection | cmName\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe just started to map the both index \u003ccode\u003eService Policy\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id="125-index-3--policyname-tag-cbqospolicymapname"\u003e1.2.5 Index 3 | PolicyName Tag: cbQosPolicyMapName\u003c/h3\u003e\n\u003cp\u003eAs each class is attached to a policyName, we need to identify the classmap with the name of the policy.\nThe name of the policy can be retrieved from the following OID:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003cth\u003eOID\u003c/th\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ecbQosPolicyMapName\u003c/td\u003e\n\u003ctd\u003e1.3.6.1.4.1.9.9.166.1.6.1.1.1\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eService Policy Index\u003c/strong\u003e.\u003cstrong\u003eObject Index\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eA simple walk over the \u003ccode\u003ecbQosPolicyMapName\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosPolicyMapName - 1.3.6.1.4.1.9.9.166.1.6.1.1.1\n\n1.3.6.1.4.1.9.9.166.1.6.1.1.1[.1035] = STRING: LAN_Out\n1.3.6.1.4.1.9.9.166.1.6.1.1.1[.1063] = STRING: CPP\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe problem here, is that the pair index of \u003ccode\u003eService Policy Index.Object Index\u003c/code\u003e is \u003cstrong\u003edifferent from the classmap object type\u003c/strong\u003e. In order to retrieve this informaton and keep the classmap index, we must query the following OID - \u003ccode\u003ecbQosParentObjectsIndex\u003c/code\u003e - \u003ccode\u003e1.3.6.1.4.1.9.9.166.1.5.1.1.4\u003c/code\u003e that gives us the relation between objects on QoS:\u003c/p\u003e\n\u003cp\u003eA simple walk over the \u003ccode\u003ecbQosParentObjectsIndex\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosParentObjectsIndex - 1.3.6.1.4.1.9.9.166.1.5.1.1.4\n\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1043] = Gauge32: 0\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1045] = Gauge32: 1043\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1047] = Gauge32: 1045\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1049] = Gauge32: 1045\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1051] = Gauge32: 1043\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1053] = Gauge32: 1051\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1085] = Gauge32: 1051\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1099] = Gauge32: 0\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1101] = Gauge32: 1099\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1103] = Gauge32: 1101\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1105] = Gauge32: 1101\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1107] = Gauge32: 1099\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1109] = Gauge32: 1107\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe object relates the child with the parent, so filtering the, the pair of OID from classmap we will obtain the index of the policy attached to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e...\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1045] = Gauge32: 1043\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1051] = Gauge32: 1043\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1101] = Gauge32: 1099\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe index values referes to the \u003ccode\u003eObject Index\u003c/code\u003e from \u003ccode\u003ePolicyMap\u003c/code\u003e, so the new indexes that we want to build in order to query the PolicyName, must be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[.1043][.1043] - PolicyMap\n[.1099][.1099] - PolicyMap\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the information above we need to define a new measurement, but in this case, we need to do at least 2 indirects and, in the middle modify the check condition with another indexes, so we define the measurement as \u003cstrong\u003e\u0026quot;(snmp Table) Indexed with multiple indirect TAG\u0026quot;\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e![mi-indexed_mit]\u003c/p\u003e\n\u003cp\u003eWe fill the index with the following field/values:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Label\u003c/td\u003e\n\u003ctd\u003ecbQosPolicyMapName\u003c/td\u003e\n\u003ctd\u003eUnique SNMPCollector internal identifier of measurement\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Description\u003c/td\u003e\n\u003ctd\u003eIndex to retrieve cbQosPolicyMapName\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Base OID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.5.1.1.4\u003c/td\u003e\n\u003ctd\u003eBase OID is the \u003ccode\u003ecbQosParentObjectsIndex\u003c/code\u003e which gives us the value of the config related with \u003ccode\u003eObject Index\u003c/code\u003e from \u003ccode\u003ePolicyMap\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag\u003c/td\u003e\n\u003ctd\u003epolicyMapName\u003c/td\u003e\n\u003ctd\u003eWe will use directly the name of the field that is being retrieved, but you can set whatever you want as your Tag Key\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag Format\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003eWe don\u0026rsquo;t need to format the policyDirection tag, but you are free to set up whatever you want!\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMulti Tag OID\u003c/td\u003e\n\u003ctd\u003e(*)\u003c/td\u003e\n\u003ctd\u003eMultiple indirects to obtain the PolicyName and keep it on ClassMap pair of \u003ccode\u003eService Policy Index\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Dependency\u003c/td\u003e\n\u003ctd\u003eIDX{2};DOT[0:1];SKIP\u003c/td\u003e\n\u003ctd\u003e(**)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Index 3 - cbQosPolicyMapName\n\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Examples/QoS/cbqospolicymapname_meas.jpg" alt="cbqospolicymapname_meas" title="example of definition of cbQosPolicyMapName"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e(*) Multi Tag OID\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWe will define 2 TagOID:\u003c/p\u003e\n\u003cp\u003eTagOID 0:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex TagOID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.5.1.1.2\u003c/td\u003e\n\u003ctd\u003eIndex TagOID to retrieve the \u003ccode\u003eObject Index\u003c/code\u003e from \u003ccode\u003ePolicyMap\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexFormat\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e${IDX1|DOT[0:0]|STRING}.$VAL1${IDX1|DOT[0:0]|STRING}.$VAL1\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThis IndexFormat will modify the check condition and will create the desired index in order keep iterating over indirect tables. Following with the example:\u003c/p\u003e\n\u003cp\u003eThe generated index is just the \u003ccode\u003eService Policy Index\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e from \u003ccode\u003ePolicyMap\u003c/code\u003e, so we can use this to retrieve any parameter from \u003ccode\u003ePolicyMapCfg\u003c/code\u003e table, just using the same indirect as we defined on CM, but using different indexes\u003c/p\u003e\n\u003cp\u003eTagOID 1:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex TagOID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.6.1.1.1\u003c/td\u003e\n\u003ctd\u003eIndex TagOID to retrieve the PolicyMap Name\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexFormat\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Examples/QoS/cbqospolicymapname_meas_index.jpg" alt="cbqospolicymapname_meas_index" title="example of definition of cbQosPolicyMapName multi TagOID"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e(**) Dependency\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn this case, we need to retrieve both indexes from the IDX{2}, the complete CMIndex \u003ccode\u003eService Policy Index\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe logic is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFrom BaseOID, we will retrieve the desired parent index:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosParentObjectsIndex - .1.3.6.1.4.1.9.9.166.1.5.1.1.4\n...\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1045] = Gauge32: 1043\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1051] = Gauge32: 1043\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1101] = Gauge32: 1099\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eOn the first TagOID, it will try to retrieve the ObjectIndex, but with a modified IDX:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; ${IDX1|DOT[0:0]|STRING}.$VAL1\n[.1043][.1043]\n[.1043][.1043]\n[.1099][.1099]\n\n\n\u0026gt; cbQosConfigIndex - .1.3.6.1.4.1.9.9.166.1.5.1.1.2\n\n...\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1043] = Gauge32: 1035\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1099][.1109] = Gauge32: 1027\n...\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eAnd finally, the last TagOID will retrieve the policyNameMap\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosPolicyMapName - 1.3.6.1.4.1.9.9.166.1.6.1.1.1\n\n1.3.6.1.4.1.9.9.166.1.6.1.1.1[.1035] = STRING: LAN_Out\n1.3.6.1.4.1.9.9.166.1.6.1.1.1[.1063] = STRING: CPP\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe final index will be the Base with the retrieved tags from policy name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[.1043][.1045] = \u0026quot;LAN_Out\u0026quot;\n[.1043][.1051] = \u0026quot;LAN_Out\u0026quot;\n[.1099][.1101] = \u0026quot;CPP\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt this point, the IDX{3}, will be, with heridated tags from IDX{2}:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; Index: IDX{2}\n\n[.1043][.1045] = \u0026quot;Te1/0/3|2|ICMP\u0026quot;           || ifName | policyDirection | cmName\n[.1043][.1051] = \u0026quot;Te1/0/3|2|class-default\u0026quot;  || ifName | policyDirection | cmName\n[.1099][.1101] = \u0026quot;Te1/0/3|1|NonLocal\u0026quot;       || ifName | policyDirection | cmName\n\n\u0026gt; Index: IDX{3} | cbQosPolicyMapName | IDX{2};DOT[0:1];SKIP\n\n[.1043][.1045] = \u0026quot;Te1/0/3|2|ICMP|LAN_Out\u0026quot;           || ifName | policyDirection | cmName | policyMapName\n[.1043][.1051] = \u0026quot;Te1/0/3|2|class-default|LAN_Out\u0026quot;  || ifName | policyDirection | cmName | policyMapName\n[.1099][.1101] = \u0026quot;Te1/0/3|1|NonLocal|CPP\u0026quot;       || ifName | policyDirection | cmName | policyMapName\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="126-index-4--classmap-tag-cbqoscminfo"\u003e1.2.6 Index 4 | ClassMap Tag: cbQosCMInfo\u003c/h3\u003e\n\u003cp\u003eOnce we have mapped the CMName and its related PolicyMap Name, we can also retrieve the extra info: \u003ccode\u003ecbQosCMInfo - .1.3.6.1.4.1.9.9.166.1.7.1.1.3\u003c/code\u003e, already present in table of \u003ccode\u003ecbQosClassMapCfg - 1.3.6.1.4.1.9.9.166.1.7.1.1\u003c/code\u003e, so the way to configure the measurement is exactly the same as \u003ccode\u003ecbQosCMName\u003c/code\u003e with the same config index.\nA simple walk over \u003ccode\u003ecbQosCMInfo\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosCMInfo - .1.3.6.1.4.1.9.9.166.1.7.1.1.3\n\n.1.3.6.1.4.1.9.9.166.1.7.1.1.3[.1025] = INTEGER: matchAny(3)\n.1.3.6.1.4.1.9.9.166.1.7.1.1.3[.1029] = INTEGER: matchAll(2)\n.1.3.6.1.4.1.9.9.166.1.7.1.1.3[.1057] = INTEGER: matchAny(3)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs we have an indirect tag, we will create an index with \u0026ldquo;(snmp Table) Indexed with indirect TAG\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e![mi-indexed_it]\u003c/p\u003e\n\u003cp\u003eWe fill with the index with following field/values:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Label\u003c/td\u003e\n\u003ctd\u003ecbQosCMInfo\u003c/td\u003e\n\u003ctd\u003eUnique SNMPCollector internal identifier of measurement\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Description\u003c/td\u003e\n\u003ctd\u003eIndex to retrieve cbQosCMInfo\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Base OID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.5.1.1.2\u003c/td\u003e\n\u003ctd\u003eBase OID is the \u003ccode\u003ecbQosConfigIndex\u003c/code\u003e which gives us the value of the config related with \u003ccode\u003ecbQosCMInfo\u003c/code\u003e table\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag OID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.7.1.1.3\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ecbQosCMInfo\u003c/code\u003e TagOID that will match with \u003ccode\u003ecbQosConfigIndex\u003c/code\u003e result\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag\u003c/td\u003e\n\u003ctd\u003ecmInfo\u003c/td\u003e\n\u003ctd\u003eWe will use directly the name of the field that is being retrieved, but you can set whatever you want as your Tag Key\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag Format\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003eWe don\u0026rsquo;t need to format the policyDirection tag, but you are free to set up whatever you want!\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Dependency\u003c/td\u003e\n\u003ctd\u003eIDX{3};DOT[0:1];SKIP\u003c/td\u003e\n\u003ctd\u003e(*)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Index 4 - cbQosCMInfo\n\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e(*) Dependency\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn this case, as the matching index is the full index and it will just heridate the IDX{3} tags\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Examples/QoS/cbqoscminfo_meas.jpg" alt="cbqoscminfo_meas" title="example of definition of cbQosCMInfo"\u003e\u003c/p\u003e\n\u003cp\u003eAt this point, the IDX{4}, will be, with heridated tags from IDX{3}:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; Index: IDX{3}\n\n[.1043][.1045] = \u0026quot;Te1/0/3|2|ICMP|LAN_Out\u0026quot;           || ifName | policyDirection | cmName | policyMapName\n[.1043][.1051] = \u0026quot;Te1/0/3|2|class-default|LAN_Out\u0026quot;  || ifName | policyDirection | cmName | policyMapName\n[.1099][.1101] = \u0026quot;Te1/0/3|1|NonLocal|CPP\u0026quot;       || ifName | policyDirection | cmName | policyMapName\n\n\n\u0026gt; Index: IDX{4} | cbQosCMInfo | IDX{3};DOT[0:1];SKIP\n\n...\n[.1043][.1045] = \u0026quot;Te1/0/3|2|ICMP|LAN_Out|\u0026quot;           || ifName | policyDirection | cmName | policyMapName | cbQosCMInfo|3\n[.1043][.1051] = \u0026quot;Te1/0/3|2|class-default|LAN_Out|2\u0026quot;  || ifName | policyDirection | cmName | policyMapName | cbQosCMInfo\n[.1099][.1101] = \u0026quot;Te1/0/3|1|NonLocal|CPP|3\u0026quot;       || ifName | policyDirection | cmName | policyMapName |cbQosCMInfo\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="127-result"\u003e1.2.7 Result\u003c/h3\u003e\n\u003cp\u003eFinally, we setup the result of our multiindex.\u003c/p\u003e\n\u003cp\u003eAs we have heredated all tags until the last index, we only need to setup up the result as:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eResult\u003c/td\u003e\n\u003ctd\u003eIDX{4}\u003c/td\u003e\n\u003ctd\u003eResult of the multiindex\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eAnd the final pair of \u003ccode\u003e[index]:[TagValues]\u003c/code\u003e will be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e...\n[.1043][.1045] = \u0026quot;Te1/0/3|2|ICMP|LAN_Out|2\u0026quot;\n[.1043][.1051] = \u0026quot;Te1/0/3|2|class-default|LAN_Out|2\u0026quot;\n[.1099][.1101] = \u0026quot;Te1/0/3|1|NonLocal|CPP|3\u0026quot;\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="13-configuring-filters"\u003e1.3 Configuring filters\u003c/h2\u003e\n\u003cp\u003eAs the base OID of our CMStats is directly the \u003ccode\u003eService Policy Index\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e based on \u003ccode\u003ecbQosConfigIndex - .1.3.6.1.4.1.9.9.166.1.5.1.1.2\u003c/code\u003e it will generate an entry for each object index, but not only the related with CM, also the PolicyMap, MatchStmt and all available object in all stats table.\u003c/p\u003e\n\u003cp\u003eIn order to retrieve only the desired one based on what we are retrieving, we will define a \u003ccode\u003eMeasurement Filter\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id="131-oid-condition---filter-classmap"\u003e1.3.1 OID Condition - Filter classmap\u003c/h3\u003e\n\u003cp\u003eWe want to filter only classmap objects, so we need to define a new condition over the OID \u003ccode\u003ecbQosObjectsType - .1.3.6.1.4.1.9.9.166.1.5.1.1.3\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eA simple walk over this OID:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosObjectsType - .1.3.6.1.4.1.9.9.166.1.5.1.1.3\n\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1043] = INTEGER: policymap(1)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1045] = INTEGER: classmap(2)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1047] = INTEGER: trafficShaping(6)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1049] = INTEGER: queueing(4)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1051] = INTEGER: classmap(2)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1053] = INTEGER: trafficShaping(6)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1085] = INTEGER: queueing(4)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1099][.1099] = INTEGER: policymap(1)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1099][.1101] = INTEGER: classmap(2)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1099][.1103] = INTEGER: trafficShaping(6)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1099][.1105] = INTEGER: police(7)\n....\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd filtered by desired one: \u003ccode\u003eclassmap(2)\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e...\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1045] = INTEGER: classmap(2)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1051] = INTEGER: classmap(2)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1099][.1101] = INTEGER: classmap(2)\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo to menu and click over \u003ccode\u003eOID Condition\u003c/code\u003e section\nCreate a \u003ccode\u003e+ New\u003c/code\u003e OID Condition and fill it with:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003ecbQosObjectsType_classmap\u003c/td\u003e\n\u003ctd\u003eThe unique internal ID to identify the OID Condition\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIs Multiple\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eIt allows to create a OID condition based on already defined ones\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.5.1.1.3\u003c/td\u003e\n\u003ctd\u003eThe OID to filter based on object type\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCondType\u003c/td\u003e\n\u003ctd\u003e(neq) numeric equal\u003c/td\u003e\n\u003ctd\u003eAs the output is an integer, we will select number equal as condition type\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCondValue\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003eFilter only the class objects\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ OIDCondition to filter classmap objects\n\u003c/p\u003e\n\u003ch3 id="132-measurementfilter---filter-classmap"\u003e1.3.2 MeasurementFilter - Filter classmap\u003c/h3\u003e\n\u003cp\u003eNow, we want to create a new measurement filter with already created OID condition\u003c/p\u003e\n\u003cp\u003eGo to menu and click over \u003ccode\u003eMeasurement Filters\u003c/code\u003e section\nCreate a \u003ccode\u003e+ New\u003c/code\u003e OID Condition and fill it with:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003ecisco_qos_cbQosCMStats_classmap\u003c/td\u003e\n\u003ctd\u003eThe unique internal ID to identify the Measurement Filter\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMeasurements\u003c/td\u003e\n\u003ctd\u003ecisco_qos_cbQosCMStats..cbQosPolicyMapName\u003c/td\u003e\n\u003ctd\u003eWe will select the internal index of policyMapName\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFilter type\u003c/td\u003e\n\u003ctd\u003eOID Condition\u003c/td\u003e\n\u003ctd\u003eFilter type\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOid Condition\u003c/td\u003e\n\u003ctd\u003ecbQosObjectsType_classmap\u003c/td\u003e\n\u003ctd\u003eThe already created OID Condition only to filter classmap objects\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Measurement filter to apply OIDCondition on CMStats\n\u003c/p\u003e\n\u003ch2 id="14-configuring-measurement-group"\u003e1.4 Configuring Measurement Group\u003c/h2\u003e\n\u003cp\u003eGo to menu and click over \u003ccode\u003eMeasurement Filters\u003c/code\u003e section\nCreate a \u003ccode\u003e+ New\u003c/code\u003e Measurement Group and fill it with:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003eCisco_QOS\u003c/td\u003e\n\u003ctd\u003eThe unique internal ID to identify the Measurement Group\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMeasurements\u003c/td\u003e\n\u003ctd\u003ecisco_qos_cbQosCMStats\u003c/td\u003e\n\u003ctd\u003eMeasurement from cisco_qos_cbQosCMStats\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Cisco_QOS measurement group with CMStats\n\u003c/p\u003e\n\u003ch2 id="15-configuring-device"\u003e1.5 Configuring Device\u003c/h2\u003e\n\u003cp\u003eAttach your new measurement group and filters to the existing Device with QoS enabled\u003c/p\u003e\n\u003ch2 id="16-reload-configuration"\u003e1.6 Reload configuration\u003c/h2\u003e\n\u003cp\u003eIn order to reload configuration you must click on the menu item \u003ccode\u003eReload Config\u003c/code\u003e. Once the SNMP Collector will receive the signal and it will try to reload all configuration. During that process you won\u0026rsquo;t be able to navigate until the process is finished.\u003c/p\u003e\n\u003ch2 id="17-check-your-results"\u003e1.7 Check your results!\u003c/h2\u003e\n\u003cp\u003eSee what are you collecting from the Runtime component!\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClick on \u003ccode\u003eRuntime\u003c/code\u003e menu item\u003c/li\u003e\n\u003cli\u003eFind your device and check  if its actived and connected. If not, check your connection data!\u003c/li\u003e\n\u003cli\u003eClick  on the eye icon and see what are you collecting!!!\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Examples/QoS/runtime_qoscm.jpg" alt="runtime_qoscm" title="Example of QoS CMStats"\u003e\u003c/p\u003e\n\u003ch1 id="2-tsstats"\u003e2. TSStats\u003c/h1\u003e\n\u003cp\u003eThe first set of data that we want to retrieve are the TSStats\u003c/p\u003e\n\u003ch2 id="21-configuring-metrics"\u003e2.1 Configuring metrics\u003c/h2\u003e\n\u003cp\u003eAvailable metrics are defined on \u003ccode\u003ecbQosCMStatsTable - 1.3.6.1.4.1.9.9.166.1.15.1.1\u003c/code\u003e.\nIn our example we will configure the following metrics:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eField Name\u003c/th\u003e\n\u003cth\u003eIsTag\u003c/th\u003e\n\u003cth\u003eDataSrcType\u003c/th\u003e\n\u003cth\u003eGetRate\u003c/th\u003e\n\u003cth\u003eBase OID/Extradata\u003c/th\u003e\n\u003cth\u003eScale\u003c/th\u003e\n\u003cth\u003eShift\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ecisco_cbQosTSStatsDelayedByte64\u003c/td\u003e\n\u003ctd\u003ecbQosTSStatsDelayedByte64\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.19.1.1.3\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecisco_cbQosTSStatsDelayedPkt64\u003c/td\u003e\n\u003ctd\u003ecbQosCMPrePolicyByte64\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.19.1.1.6\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecisco_cbQosTSStatsDropByte64\u003c/td\u003e\n\u003ctd\u003ecbQosCMPrePolicyBitRate\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.19.1.1.9\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eAs we have said, each metric will have a double index: \u003ccode\u003e[Service Policy Index].[Object Index]\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id="12-configuring-measurements-1"\u003e1.2 Configuring measurements\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s start to define the measurement\u003c/p\u003e\n\u003ch3 id="121-overview-1"\u003e1.2.1 Overview\u003c/h3\u003e\n\u003cp\u003eAs we have defined, the TSStats needs the following tags to identify each metric:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInterface\u003c/li\u003e\n\u003cli\u003eDirection\u003c/li\u003e\n\u003cli\u003ePolicyMap Name\u003c/li\u003e\n\u003cli\u003eClassMap Name\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote that as a TS is related with ClassMap, we will retrieve also it\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="222-index-0--service-policy-index-tag-cbqosifindex"\u003e2.2.2 Index 0 | Service Policy Index Tag: cbQosIfIndex\u003c/h3\u003e\n\u003cp\u003eIt is the same configuration as CMStats\u003c/p\u003e\n\u003cp\u003eThe final output map of pairs [index]:[tag] will be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; Index: IDX{0} | cbQosIfIndex\n\n[.1043] = \u0026quot;Te1/0/3\u0026quot; || ifName\n[.1099] = \u0026quot;Te1/0/3\u0026quot; || ifName\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="223-index-1--service-policy-index-tag-cbqospolicydirection"\u003e2.2.3 Index 1 | Service Policy Index Tag: cbQosPolicyDirection\u003c/h3\u003e\n\u003cp\u003eIt is the same configuration as CMStats\u003c/p\u003e\n\u003cp\u003eAt this point, we will have that the \u003ccode\u003eIDX{1}\u003c/code\u003e will be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; Index: IDX{0} | cbQosIfIndex\n\n[.1043] = \u0026quot;Te1/0/3\u0026quot; || ifName\n[.1099] = \u0026quot;Te1/0/3\u0026quot; || ifName\n\n\u0026gt; Index: IDX{1} | cbQosPolicyDirection | IDX{0};DOT[0:0];SKIP\n\n[.1043] = \u0026quot;Te1/0/3|2\u0026quot; || ifName | policyDirection\n[.1099] = \u0026quot;Te1/0/3|1\u0026quot; || ifName | policyDirection\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="224-index-2--classmap-tag-cbqoscmname"\u003e2.2.4 Index 2 | ClassMap Tag: cbQosCMName\u003c/h3\u003e\n\u003cp\u003eAs we have done on CMStats with PolicyMap name, as ClassMap is another object type, we need to iterate over relations OID - \u003ccode\u003e\u0026gt; cbQosParentObjectsIndex - 1.3.6.1.4.1.9.9.166.1.5.1.1.4\u003c/code\u003e in order to identify the related ClassMap\u003c/p\u003e\n\u003cp\u003eIn this case, filtered by the matchstmt objects:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosParentObjectsIndex - 1.3.6.1.4.1.9.9.166.1.5.1.1.4\n\n...\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1043] = Gauge32: 0\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1045] = Gauge32: 1043 # classmap\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1047] = Gauge32: 1045 # ts\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1051] = Gauge32: 1043 # classmap\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1053] = Gauge32: 1051 # ts\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1099] = Gauge32: 0 # policymap\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1101] = Gauge32: 1099 # classmap\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1103] = Gauge32: 1101 # ts\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, as we have done on CMStats, we need to make a multiple indrection in order to retrieve the classmap name, so, we will create an as \u003cstrong\u003e\u0026quot;(snmp Table) Indexed with multiple indirect TAG\u0026quot;\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e![mi-indexed_mit]\u003c/p\u003e\n\u003cp\u003eWe fill the index with the following field/values:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Label\u003c/td\u003e\n\u003ctd\u003ecbQosCMName\u003c/td\u003e\n\u003ctd\u003eUnique SNMPCollector internal identifier of measurement\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Description\u003c/td\u003e\n\u003ctd\u003eIndex to retrieve cbQosCMName\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Base OID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.5.1.1.4\u003c/td\u003e\n\u003ctd\u003eBase OID is the \u003ccode\u003ecbQosParentObjectsIndex\u003c/code\u003e which gives us the value of the config related with \u003ccode\u003eObject Index\u003c/code\u003e from \u003ccode\u003eClassMap\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag\u003c/td\u003e\n\u003ctd\u003ecmName\u003c/td\u003e\n\u003ctd\u003eWe will use directly the name of the field that is being retrieved, but you can set whatever you want as your Tag Key\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag Format\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003eWe don\u0026rsquo;t need to format the policyDirection tag, but you are free to set up whatever you want!\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMulti Tag OID\u003c/td\u003e\n\u003ctd\u003e(*)\u003c/td\u003e\n\u003ctd\u003eMultiple indirects to obtain the ClassMapName and keep it on ClassMap pair of \u003ccode\u003eService Policy Index\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Dependency\u003c/td\u003e\n\u003ctd\u003eIDX{1};DOT[0:0];SKIP\u003c/td\u003e\n\u003ctd\u003e(**)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Index 2 - cbQosCMName\n\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Examples/QoS/cbqoscmname_ts_meas.jpg" alt="cbqoscmname_ts_meas" title="Example of CMName from TSStats"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e(*) Multi Tag OID\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWe will define 2 TagOID:\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eTagOID 0\u003c/strong\u003e\u003c/em\u003e:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex TagOID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.5.1.1.2\u003c/td\u003e\n\u003ctd\u003eIndex TagOID to retrieve the \u003ccode\u003eObject Index\u003c/code\u003e from \u003ccode\u003eClassMap\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexFormat\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e${IDX1|DOT[0:0]|STRING}.$VAL1${IDX1|DOT[0:0]|STRING}.$VAL1\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThis IndexFormat will modify the check condition and will create the desired index in order keep iterating over indirect tables. Following with the example:\u003c/p\u003e\n\u003cp\u003eThe generated index is just the \u003ccode\u003eService Policy Index\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e from \u003ccode\u003eClassMap\u003c/code\u003e, so we can use this to retrieve any parameter from \u003ccode\u003eClassMapCFG\u003c/code\u003e table, but using different indexes\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eTagOID 1\u003c/strong\u003e\u003c/em\u003e:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex TagOID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.7.1.1.1\u003c/td\u003e\n\u003ctd\u003eIndex TagOID to retrieve the ClassMap Name\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexFormat\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Examples/QoS/cbqoscmname_meas_index.jpg" alt="cbqoscmname_meas_index" title="example of definition of cbqosCMName multi TagOID"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e(**) Dependency\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn this case, we will retrieve the  to retrieve only the \u003ccode\u003eService Policy Index\u003c/code\u003e from IDX{1}\u003c/p\u003e\n\u003cp\u003eThe logic is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFrom BaseOID, we will retrieve the desired parent index:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosParentObjectsIndex - .1.3.6.1.4.1.9.9.166.1.5.1.1.4\n...\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1047] = Gauge32: 1045\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1053] = Gauge32: 1051\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1103] = Gauge32: 1101\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eOn the first TagOID, it will try to retrieve the ObjectIndex, but with a modified IDX:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; ${IDX1|DOT[0:0]|STRING}.$VAL1\n[.1043][.1045]\n[.1043][.1051]\n[.1099][.1101]\n\n\n\u0026gt; cbQosConfigIndex - .1.3.6.1.4.1.9.9.166.1.5.1.1.2\n\n...\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1045] = Gauge32: 1029\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1099][.1051] = Gauge32: 1025\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1099][.1101] = Gauge32: 1057\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eAnd finally, the last TagOID will retrieve the CMName\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosCMName - .1.3.6.1.4.1.9.9.166.1.7.1.1.1\n\n.1.3.6.1.4.1.9.9.166.1.7.1.1.1[.1025] = STRING: class-default\n.1.3.6.1.4.1.9.9.166.1.7.1.1.1[.1029] = STRING: ICMP\n.1.3.6.1.4.1.9.9.166.1.7.1.1.1[.1057] = STRING: NonLocal\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe final index will be the Base with the retrieved tags from classmap name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[.1043][.1047] = \u0026quot;ICMP\u0026quot;\n[.1043][.1053] = \u0026quot;class-default\u0026quot;\n[.1099][.1103] = \u0026quot;NonLocal\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt this point, the IDX{2}, will be, with heridated tags from IDX{1}:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; Index IDX{1}:\n\n[.1043] = \u0026quot;Te1/0/3|2\u0026quot; || ifName | policyDirection\n[.1099] = \u0026quot;Te1/0/3|1\u0026quot; || ifName | policyDirection\n\n\u0026gt; Index: IDX{2} | cbQosCMName | IDX{1};DOT[0:0];SKIP\n\n\u0026gt;\u0026gt; DOT[0:0] = [.1043] / [.1099]\n\n[.1043][.1047] = \u0026quot;Te1/0/3|2|ICMP\u0026quot;           || ifName | policyDirection | cmName\n[.1043][.1053] = \u0026quot;Te1/0/3|2|class-default\u0026quot;  || ifName | policyDirection | cmName\n[.1099][.1103] = \u0026quot;Te1/0/3|1|NonLocal\u0026quot;       || ifName | policyDirection | cmName\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="224-index-3--policymap-tag-policymapname"\u003e2.2.4 Index 3 | PolicyMap Tag: policyMapName\u003c/h3\u003e\n\u003cp\u003eAs we have done on the previous index, we will try to retrieve also the  PolicyMap name, in this case, we need a double iteration to retrieve the PolicyMap parents from ClassMap- \u003ccode\u003e\u0026gt; cbQosParentObjectsIndex - 1.3.6.1.4.1.9.9.166.1.5.1.1.4\u003c/code\u003e in order to identify the related ClassMap\u003c/p\u003e\n\u003cp\u003eIn this case, filtered by the matchstmt objects:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosParentObjectsIndex - 1.3.6.1.4.1.9.9.166.1.5.1.1.4\n\n...\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1043] = Gauge32: 0\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1045] = Gauge32: 1043 # classmap\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1047] = Gauge32: 1045 # ts\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1051] = Gauge32: 1043 # classmap\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1053] = Gauge32: 1051 # ts\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1099] = Gauge32: 0 # policymap\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1101] = Gauge32: 1099 # classmap\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1103] = Gauge32: 1101 # ts\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo do that, we will repeat the step on the Index 2, but in this case we will add a new Tag OID to go over PolicyMap objects instead of ClassMap objects\u003c/p\u003e\n\u003cp\u003ewe will create an as \u003cstrong\u003e\u0026quot;(snmp Table) Indexed with multiple indirect TAG\u0026quot;\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e![mi-indexed_mit]\u003c/p\u003e\n\u003cp\u003eWe fill the index with the following field/values:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Label\u003c/td\u003e\n\u003ctd\u003ecbQosPolicyMapName\u003c/td\u003e\n\u003ctd\u003eUnique SNMPCollector internal identifier of measurement\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Description\u003c/td\u003e\n\u003ctd\u003eIndex to retrieve cbQosPolicyMapName\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Base OID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.5.1.1.4\u003c/td\u003e\n\u003ctd\u003eBase OID is the \u003ccode\u003ecbQosParentObjectsIndex\u003c/code\u003e which gives us the value of the config related with \u003ccode\u003eObject Index\u003c/code\u003e from \u003ccode\u003ePolicyMap\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag\u003c/td\u003e\n\u003ctd\u003ecmName\u003c/td\u003e\n\u003ctd\u003eWe will use directly the name of the field that is being retrieved, but you can set whatever you want as your Tag Key\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Tag Format\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003eWe don\u0026rsquo;t need to format the policyDirection tag, but you are free to set up whatever you want!\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMulti Tag OID\u003c/td\u003e\n\u003ctd\u003e(*)\u003c/td\u003e\n\u003ctd\u003eMultiple indirects to obtain the ClassMapName and keep it on ClassMap pair of \u003ccode\u003eService Policy Index\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex Dependency\u003c/td\u003e\n\u003ctd\u003eIDX{2};DOT[0:1];SKIP\u003c/td\u003e\n\u003ctd\u003e(**)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Index 3 - cbQosPolicyMapName\n\u003c/p\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Examples/QoS/cbqospolicyname_ts_meas.jpg" alt="cbqospolicyname_ts_meas" title="Example of PolicyMapName from TSStats"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e(*) Multi Tag OID\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWe will define 2 TagOID:\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eTagOID 0\u003c/strong\u003e\u003c/em\u003e:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex TagOID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.5.1.1.4\u003c/td\u003e\n\u003ctd\u003eIndex TagOID to retrieve the \u003ccode\u003eParent Object\u003c/code\u003e from \u003ccode\u003eClassMap\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexFormat\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e${IDX1|DOT[0:0]|STRING}.$VAL1${IDX1|DOT[0:0]|STRING}.$VAL1\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThis IndexFormat will modify the check condition and will create the desired index in order keep iterating over indirect tables. Following with the example:\u003c/p\u003e\n\u003cp\u003eThe generated index is just the \u003ccode\u003eService Policy Index\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e from \u003ccode\u003eClassMap\u003c/code\u003e, so we can use this to retrieve the index of \u003ccode\u003ePolicyMap\u003c/code\u003e related with this \u003ccode\u003eClassMap\u003c/code\u003e table, but using different indexes\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eTagOID 1\u003c/strong\u003e\u003c/em\u003e:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex TagOID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.5.1.1.2\u003c/td\u003e\n\u003ctd\u003eIndex TagOID to retrieve the \u003ccode\u003eObject Index\u003c/code\u003e from \u003ccode\u003ePolicyMap\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexFormat\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e${IDX1|DOT[0:0]|STRING}.$VAL1${IDX1|DOT[0:0]|STRING}.$VAL1\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThis IndexFormat will modify the check condition and will create the desired index in order keep iterating over indirect tables. Following with the example:\u003c/p\u003e\n\u003cp\u003eThe generated index is just the \u003ccode\u003eService Policy Index\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e from \u003ccode\u003eClassMap\u003c/code\u003e, so we can use this to retrieve any parameter from \u003ccode\u003eClassMapCFG\u003c/code\u003e table, but using different indexes\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eTagOID 2\u003c/strong\u003e\u003c/em\u003e:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndex TagOID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.6.1.1.1\u003c/td\u003e\n\u003ctd\u003eIndex TagOID to retrieve the PolicyMap Name\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIndexFormat\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Examples/QoS/cbqoscmname_meas_index_ts.jpg" alt="cbqoscmname_meas_index_ts" title="example of definition of cbqosPolicyMap multi TagOID"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e(**) Dependency\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn this case, we need to retrieve both indexes from the IDX{2}, the complete CMIndex \u003ccode\u003eService Policy Index\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe logic is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFrom BaseOID, we will retrieve the desired parent index:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosParentObjectsIndex - .1.3.6.1.4.1.9.9.166.1.5.1.1.4\n...\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1047] = Gauge32: 1045\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1043][.1053] = Gauge32: 1051\n1.3.6.1.4.1.9.9.166.1.5.1.1.4[.1099][.1103] = Gauge32: 1101\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eOn the first TagOID, it will try to retrieve the cbQosParentObjectsIndex, but with a modified IDX, so we will match the related ClassMap\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; ${IDX1|DOT[0:0]|STRING}.$VAL1\n[.1043][.1045]\n[.1043][.1051]\n[.1099][.1101]\n\n\n\u0026gt; cbQosParentObjectsIndex - .1.3.6.1.4.1.9.9.166.1.5.1.1.4\n\n...\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1045] = Gauge32: 1043\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1051] = Gauge32: 1043\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1099][.1101] = Gauge32: 1099\n...\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eOn the second TagOID, it will try to retrieve the ObjectIndex, but with a modified IDX:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; ${IDX1|DOT[0:0]|STRING}.$VAL1\n[.1043][.1043]\n[.1043][.1043]\n[.1099][.1099]\n\n\n\u0026gt; cbQosConfigIndex - .1.3.6.1.4.1.9.9.166.1.5.1.1.2\n\n...\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1043][.1043] = Gauge32: 1035\n.1.3.6.1.4.1.9.9.166.1.5.1.1.2[.1099][.1099] = Gauge32: 1027\n...\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eAnd finally, the last TagOID will retrieve the policyNameMap\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosPolicyMapName - 1.3.6.1.4.1.9.9.166.1.6.1.1.1\n\n1.3.6.1.4.1.9.9.166.1.6.1.1.1[.1035] = STRING: LAN_Out\n1.3.6.1.4.1.9.9.166.1.6.1.1.1[.1063] = STRING: CPP\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe final index will be the Base with the retrieved tags from policy name:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[.1043][.1047] = \u0026quot;LAN_Out\u0026quot;\n[.1043][.1053] = \u0026quot;LAN_Out\u0026quot;\n[.1099][.1103] = \u0026quot;CPP\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt this point, the IDX{3}, will be, with heridated tags from IDX{2}:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; Index: IDX{2}\n\n[.1043][.1047] = \u0026quot;Te1/0/3|2|ICMP\u0026quot;           || ifName | policyDirection | cmName\n[.1043][.1053] = \u0026quot;Te1/0/3|2|class-default\u0026quot;  || ifName | policyDirection | cmName\n[.1099][.1103] = \u0026quot;Te1/0/3|1|NonLocal\u0026quot;       || ifName | policyDirection | cmName\n\n\u0026gt; Index: IDX{3} | cbQosPolicyMapName | IDX{2};DOT[0:1];SKIP\n\n[.1043][.1047] = \u0026quot;Te1/0/3|2|ICMP|LAN_Out\u0026quot;           || ifName | policyDirection | cmName | policyMapName\n[.1043][.1053] = \u0026quot;Te1/0/3|2|class-default|LAN_Out\u0026quot;  || ifName | policyDirection | cmName | policyMapName\n[.1099][.1103] = \u0026quot;Te1/0/3|1|NonLocal|CPP\u0026quot;       || ifName | policyDirection | cmName | policyMapName\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="224-result"\u003e2.2.4 Result\u003c/h3\u003e\n\u003cp\u003eFinally, we setup the result of our multiindex.\u003c/p\u003e\n\u003cp\u003eAs we have heredated all tags until the last index, we only need to setup up the result as:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eResult\u003c/td\u003e\n\u003ctd\u003eIDX{3}\u003c/td\u003e\n\u003ctd\u003eResult of the multiindex\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eAnd the final pair of \u003ccode\u003e[index]:[TagValues]\u003c/code\u003e will be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e...\n[.1043][.1047] = \u0026quot;Te1/0/3|2|ICMP|LAN_Out\u0026quot;\n[.1043][.1053] = \u0026quot;Te1/0/3|2|class-default|LAN_Out\u0026quot;\n[.1099][.1103] = \u0026quot;Te1/0/3|1|NonLocal|CPP\u0026quot;\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="23-configuring-filters"\u003e2.3 Configuring filters\u003c/h2\u003e\n\u003cp\u003eAs the base OID of our CMStats is directly the \u003ccode\u003eService Policy Index\u003c/code\u003e.\u003ccode\u003eObject Index\u003c/code\u003e based on \u003ccode\u003ecbQosConfigIndex - .1.3.6.1.4.1.9.9.166.1.5.1.1.2\u003c/code\u003e it will generate an entry for each object index, but not only the related with CM, also the PolicyMap, MatchStmt and all available object in all stats table.\u003c/p\u003e\n\u003cp\u003eIn order to retrieve only the desired one based on what we are retrieving, we will define a \u003ccode\u003eMeasurement Filter\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id="231-oid-condition---filter-ts"\u003e2.3.1 OID Condition - Filter TS\u003c/h3\u003e\n\u003cp\u003eWe want to filter only classmap objects, so we need to define a new condition over the OID \u003ccode\u003ecbQosObjectsType - .1.3.6.1.4.1.9.9.166.1.5.1.1.3\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eA simple walk over this OID:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cbQosObjectsType - .1.3.6.1.4.1.9.9.166.1.5.1.1.3\n\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1043] = INTEGER: policymap(1)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1045] = INTEGER: classmap(2)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1047] = INTEGER: trafficShaping(6)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1049] = INTEGER: queueing(4)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1051] = INTEGER: classmap(2)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1053] = INTEGER: trafficShaping(6)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1085] = INTEGER: queueing(4)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1099][.1099] = INTEGER: policymap(1)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1099][.1101] = INTEGER: classmap(2)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1099][.1103] = INTEGER: trafficShaping(6)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1099][.1105] = INTEGER: police(7)\n....\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd filtered by desired one: \u003ccode\u003etrafficShaping(6)\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e...\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1047] = INTEGER: trafficShaping(6)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1043][.1053] = INTEGER: trafficShaping(6)\n.1.3.6.1.4.1.9.9.166.1.5.1.1.3[.1099][.1103] = INTEGER: trafficShaping(6)\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo to menu and click over \u003ccode\u003eOID Condition\u003c/code\u003e section\nCreate a \u003ccode\u003e+ New\u003c/code\u003e OID Condition and fill it with:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003ecbQosObjectsType_trafficShaping\u003c/td\u003e\n\u003ctd\u003eThe unique internal ID to identify the OID Condition\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eIs Multiple\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eIt allows to create a OID condition based on already defined ones\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOID\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.166.1.5.1.1.3\u003c/td\u003e\n\u003ctd\u003eThe OID to filter based on object type\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCondType\u003c/td\u003e\n\u003ctd\u003e(neq) numeric equal\u003c/td\u003e\n\u003ctd\u003eAs the output is an integer, we will select number equal as condition type\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCondValue\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003eFilter only the class objects\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ OID Condition to filter trafficShaping\n\u003c/p\u003e\n\u003ch3 id="232-measurementfilter---filter-classmap"\u003e2.3.2 MeasurementFilter - Filter classmap\u003c/h3\u003e\n\u003cp\u003eNow, we want to create a new measurement filter with already created OID condition\u003c/p\u003e\n\u003cp\u003eGo to menu and click over \u003ccode\u003eMeasurement Filters\u003c/code\u003e section\nCreate a \u003ccode\u003e+ New\u003c/code\u003e OID Condition and fill it with:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003ecisco_qos_cbQosTSStats_trafficShaping\u003c/td\u003e\n\u003ctd\u003eThe unique internal ID to identify the Measurement Filter\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMeasurements\u003c/td\u003e\n\u003ctd\u003ecisco_qos_cbQosTSStats..cbQosPolicyMapName\u003c/td\u003e\n\u003ctd\u003eWe will select the internal index of policyMapName\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFilter type\u003c/td\u003e\n\u003ctd\u003eOID Condition\u003c/td\u003e\n\u003ctd\u003eFilter type\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOid Condition\u003c/td\u003e\n\u003ctd\u003ecbQosObjectsType_trafficShaping\u003c/td\u003e\n\u003ctd\u003eThe already created OID Condition only to filter classmap objects\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Measurement filter to apply OIDCondition on TSStats\n\u003c/p\u003e\n\u003ch2 id="24-configuring-measurement-group"\u003e2.4 Configuring Measurement Group\u003c/h2\u003e\n\u003cp\u003eGo to menu and click over \u003ccode\u003eMeasurement Filters\u003c/code\u003e section\nCreate a \u003ccode\u003e+ New\u003c/code\u003e Measurement Group and fill it with:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eField\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eID\u003c/td\u003e\n\u003ctd\u003eCisco_QOS\u003c/td\u003e\n\u003ctd\u003eThe unique internal ID to identify the Measurement Group\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMeasurements\u003c/td\u003e\n\u003ctd\u003ecisco_qos_cbQosTSStats\u003c/td\u003e\n\u003ctd\u003eMeasurement from cisco_qos_cbQosTSStats\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Cisco_QOS measurement group with TSStats\n\u003c/p\u003e\n\u003ch2 id="25-configuring-device"\u003e2.5 Configuring Device\u003c/h2\u003e\n\u003cp\u003eAttach your new measurement group and filters to the existing Device with QoS enabled\u003c/p\u003e\n\u003ch2 id="26-reload-configuration"\u003e2.6 Reload configuration\u003c/h2\u003e\n\u003cp\u003eIn order to reload configuration you must click on the menu item \u003ccode\u003eReload Config\u003c/code\u003e. Once the SNMP Collector will receive the signal and it will try to reload all configuration. During that process you won\u0026rsquo;t be able to navigate until the process is finished.\u003c/p\u003e\n\u003ch2 id="27-check-your-results"\u003e2.7 Check your results!\u003c/h2\u003e\n\u003cp\u003eSee what are you collecting from the Runtime component!\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClick on \u003ccode\u003eRuntime\u003c/code\u003e menu item\u003c/li\u003e\n\u003cli\u003eFind your device and check  if its actived and connected. If not, check your connection data!\u003c/li\u003e\n\u003cli\u003eClick  on the eye icon and see what are you collecting!!!\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/images/webUI/Examples/QoS/runtime_qosts.jpg" alt="runtime_qosts" title="Example of QoS TSStats"\u003e\u003c/p\u003e\n'},{id:24,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/examples/example-configuring-cisco-catalyst-switch/",title:"",description:null,content:'\u003ch1 id="example-configuring-cisco-catalyst-with-basic-metrics"\u003eExample: Configuring Cisco Catalyst with basic metrics\u003c/h1\u003e\n\u003cp\u003eThis example will show up how to configure a Cisco Catalyst on snmpcollector\u003c/p\u003e\n\u003ch2 id="0-prerequisites--what-and-from-we-are-going-to-collect-our-data"\u003e0. Prerequisites : What and from we are going to collect our data?\u003c/h2\u003e\n\u003ch3 id="01-snmp-device-model"\u003e0.1 SNMP Device model\u003c/h3\u003e\n\u003cp\u003eIn order to select the correct metrics for our device, we must check first what model it is.\nIf you don\u0026rsquo;t know the model, you can pre-add the device on SNMP Device Component and do a test connection. To do that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClick on \u003ccode\u003eSNMP Device\u003c/code\u003e menu item\u003c/li\u003e\n\u003cli\u003eA table with configured devices will show up. Press \u0026ldquo;New\u0026rdquo; button or edit an existing one to access to the configuration form.\u003c/li\u003e\n\u003cli\u003eFill the device with the basic connection information\u003c/li\u003e\n\u003cli\u003eIf everything is OK, you will be able to do a \u0026ldquo;Test Connection\u0026rdquo;. This button will show up a console with System information  of the Device.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="02-select-metrics-to-collect-data"\u003e0.2 Select metrics to collect data\u003c/h3\u003e\n\u003cp\u003eThe first step is selecting what metrics we want to collect. For this we can check for Cisco docs and defined MIBs like:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="http://www.cisco.com/c/en/us/td/docs/net_mgmt/prime/infrastructure/3-1/user/guide/pi_ug/mon-pol-thresh.html"\u003eCisco Doc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="http://www.cisco.com/c/en/us/support/docs/ip/simple-network-management-protocol-snmp/15215-collect-cpu-util-snmp.pdf"\u003eCisco Example\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn this example, we are going to collect the following metrics to provide basic interface and performance status of our switch.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBasic Metrics\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMetric Name\u003c/th\u003e\n\u003cth\u003eMIB\u003c/th\u003e\n\u003cth\u003eOID\u003c/th\u003e\n\u003cth\u003eIndexed\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eifHCInOctets\u003c/td\u003e\n\u003ctd\u003eIF-MIB\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.6\u003c/td\u003e\n\u003ctd\u003eifName\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eifHCOutOctets\u003c/td\u003e\n\u003ctd\u003eIF-MIB\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.10\u003c/td\u003e\n\u003ctd\u003eifName\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eifHighSpeed\u003c/td\u003e\n\u003ctd\u003eIF-MIB\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.15\u003c/td\u003e\n\u003ctd\u003eifName\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eifAlias\u003c/td\u003e\n\u003ctd\u003eIF-MIB\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.18\u003c/td\u003e\n\u003ctd\u003eifName\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eciscoMemoryPoolUsed\u003c/td\u003e\n\u003ctd\u003eCISCO-MEMORY-POOL-MIB\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.48.1.1.1.5\u003c/td\u003e\n\u003ctd\u003eciscoMemoryPoolName\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eciscoMemoryPoolFree\u003c/td\u003e\n\u003ctd\u003eCISCO-MEMORY-POOL-MIB\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.48.1.1.1.6\u003c/td\u003e\n\u003ctd\u003eciscoMemoryPoolName\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecpmCPUTotal1minRev\u003c/td\u003e\n\u003ctd\u003eCISCO-MEMORY-POOL-MIB\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.109.1.1.1.1.7\u003c/td\u003e\n\u003ctd\u003ecpmCPUTotalPhysicalIndex (depending on model)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n   ℹ️ Basic Metrics table\n\u003c/p\u003e\n\u003cp\u003eIn order to give more generic information, we will define the following extended metrics. On the next point we will see how to configure them.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eExtended Metrics\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMetric Name\u003c/th\u003e\n\u003cth\u003eFormula\u003c/th\u003e\n\u003cth\u003eIndexed\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eInputUtilization\u003c/td\u003e\n\u003ctd\u003e((ifHCInOctets * 8)/(ifHighSpeed * 1000000)) * 100\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.10\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOutputUtilization\u003c/td\u003e\n\u003ctd\u003e((ifHCOutOctets * 8)/(ifHighSpeed * 1000000)) * 100\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.10\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eciscoMemoryPool_utilization_percent\u003c/td\u003e\n\u003ctd\u003e(ciscoMemoryPoolUsed/ciscoMemoryPoolFree+ciscoMemoryPoolUsed) * 100\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.15\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ Extended Metric table\n\u003c/p\u003e\n\u003ch2 id="1-configuring-metrics"\u003e1. Configuring Metrics\u003c/h2\u003e\n\u003cp\u003eOnce we have defined our metrics its time to configure them on our SNMPCollector Instance:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClick on \u003ccode\u003eSNMP Metric\u003c/code\u003e menu item\u003c/li\u003e\n\u003cli\u003eClick \u003ccode\u003e+New\u003c/code\u003e button. The metric form will show up.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eNotes:\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOn \u003ccode\u003eCounter32/64\u003c/code\u003e metric type you can define \u003ccode\u003eCOUNTER32/64\u003c/code\u003e as DataSrcType, which computes the difference between iterations. It only works with really counter behaivour.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIsTag\u003c/code\u003e option allows to set the value as tag. The tag key will be defined as \u003ccode\u003eField Name\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGetRate\u003c/code\u003e option only works when \u003ccode\u003eCOUNTERNN\u003c/code\u003e as DataSrcType. It divides the result of the computed difference by the elapsed time between polls.\u003c/li\u003e\n\u003cli\u003eRemember that you can always test your OIDs on SNMP Console from our pre-added SNMP Device\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eRecomendations:\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIn order to identify all your components IDs, we recommend you to set some prefix when you are configuring them. This will allow to find faster and set up devices easier. In this example, if.* Metrics are coming from a MIB that can be shared for more than one device type. For the CPU/Mem metrics, we will use the prefix \u003ccode\u003eCisco_Catalyst\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="11-configure-basic-metrics"\u003e1.1 Configure Basic metrics\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eField Name\u003c/th\u003e\n\u003cth\u003eIsTag\u003c/th\u003e\n\u003cth\u003eDataSrcType\u003c/th\u003e\n\u003cth\u003eGetRate\u003c/th\u003e\n\u003cth\u003eBase OID/Extradata\u003c/th\u003e\n\u003cth\u003eScale\u003c/th\u003e\n\u003cth\u003eShift\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eifHCInOctets\u003c/td\u003e\n\u003ctd\u003eifHCInOctets\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.6\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eifHCOutOctets\u003c/td\u003e\n\u003ctd\u003eifHCOutOctets\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eCOUNTER64\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.10\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eifHighSpeed\u003c/td\u003e\n\u003ctd\u003eifHighSpeed\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eGauge32\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.15\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eifAlias\u003c/td\u003e\n\u003ctd\u003eifAlias\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003ctd\u003eOCTETSTRNG\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.31.1.1.1.18\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCisco_Catalyst_ciscoMemoryPoolUsed\u003c/td\u003e\n\u003ctd\u003ememUsed\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eGauge32\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.48.1.1.1.5\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCisco_Catalyst_ciscoMemoryPoolFree\u003c/td\u003e\n\u003ctd\u003ememFree\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eGauge32\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.48.1.1.1.6\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCisco_Catalyst_cpmCPUTotal1minRev\u003c/td\u003e\n\u003ctd\u003ecpuUsed\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eGauge32\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.109.1.1.1.1.7\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ SNMP Basic Metrics configuration\n\u003c/p\u003e\n\u003cp\u003eOnce you get all your basic metrics, it is time to configure the extended ones:\u003c/p\u003e\n\u003ch3 id="12-configure-extended-metrics"\u003e1.2 Configure Extended metrics\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eField Name\u003c/th\u003e\n\u003cth\u003eIsTag\u003c/th\u003e\n\u003cth\u003eDataSrcType\u003c/th\u003e\n\u003cth\u003eGetRate\u003c/th\u003e\n\u003cth\u003eBase OID/Extradata\u003c/th\u003e\n\u003cth\u003eScale\u003c/th\u003e\n\u003cth\u003eShift\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eInputUtilization\u003c/td\u003e\n\u003ctd\u003eInputUtilization\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eSTRINGEVAL\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e((ifHCInOctets * 8)/(ifHighSpeed * 1000000)) * 100\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOutputUtilization\u003c/td\u003e\n\u003ctd\u003eOutputUtilization\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eSTRINGEVAL\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e((ifHCOutOctets * 8)/(ifHighSpeed * 1000000)) * 100\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCisco_ciscoMemoryPool_utilization_percent\u003c/td\u003e\n\u003ctd\u003ememUtilization\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003eSTRINGEVAL\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e(ciscoMemoryPoolUsed/ciscoMemoryPoolFree+ciscoMemoryPoolUsed) * 100\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ SNMP Extended Metrics configuration\n\u003c/p\u003e\n\u003ch2 id="2-configuring--measurements"\u003e2. Configuring  Measurements\u003c/h2\u003e\n\u003cp\u003eOnce we have our metrics configured, its time to define where and how we want to store them in InfluxDB data structure: measurements.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eRecomendations:\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf a collection of metrics are defined with the same index OID, try to set up them on the same measurement. This will reduce the number of walks to create the indexes and filterings rules.\u003c/li\u003e\n\u003cli\u003eTry to define the measurement name with a easy identifier to make configuring the devices easier for you.\u003c/li\u003e\n\u003cli\u003eIf you are going to define metrics with \u0026lsquo;nonZero\u0026rsquo; report, remember that if the metric is not already defined on InfluxDB you won\u0026rsquo;t be able to query it. We recommend you to create the metrics for few minutes and then change the report status to desired \u003ccode\u003enonZero\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo create a measurement:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClick on Measurement menu item\u003c/li\u003e\n\u003cli\u003eClick \u003ccode\u003e+New\u003c/code\u003e button. The measurement form will show up.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="21-ifmib-measurement"\u003e2.1 ifMIB Measurement\u003c/h3\u003e\n\u003cp\u003eThe following metrics have the same index on the table and are coming from the same MIB, so we create a new measurement with ifMIB basic + extended metrics.\u003c/p\u003e\n\u003cp\u003eIn our example, we are only interested of computed metrics, so, we need set the right report status of each one:\u003c/p\u003e\n\u003cdd\u003e🚫-ifHCInOctets\u003c/dd\u003e\n\u003cdd\u003e🚫-ifHCOutOctets\u003c/dd\u003e\n\u003cdd\u003e🚫-ifHighSpeed\u003c/dd\u003e\n\u003cdd\u003e🚫-ifAlias\u003c/dd\u003e\n\u003cdd\u003e✅-InputUtilization\u003c/dd\u003e\n\u003cdd\u003e✅-OutputUtilization\u003c/dd\u003e\n\u003cbr\u003e\n_Notes_:\n\u003cul\u003e\n\u003cli\u003eAs the defined extended metrics are computed, we need to add relational needed metrics on the same measurement.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe define the Cisco_ifMIB_Basics measurement which will group all metrics. Remember that they are indexed with the name of the interfaces, so we need to set up like this:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003cth\u003eGetMode\u003c/th\u003e\n\u003cth\u003eIndex OID\u003c/th\u003e\n\u003cth\u003eTag OID\u003c/th\u003e\n\u003cth\u003eIndex Tag\u003c/th\u003e\n\u003cth\u003eIndex Tag Format\u003c/th\u003e\n\u003cth\u003eIndex as Value\u003c/th\u003e\n\u003cth\u003eMetric Fields\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eCisco_ifMIB_Basics\u003c/td\u003e\n\u003ctd\u003ecisco_ifMib_basics\u003c/td\u003e\n\u003ctd\u003eindexed\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.2.2.1.2\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003eportName\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003e#BASICS\u003c/em\u003e:\u003cul\u003e\u003cli\u003eifHCInOctets\u003c/span\u003e\u003c/li\u003e\u003cli\u003eifHCOutOctets\u003c/li\u003e \u003cli\u003eifHighSpeed\u003c/li\u003e\u003cli\u003eifAlias\u003c/li\u003e\u003c/ul\u003e\u003cem\u003e#EXTENDED\u003c/em\u003e:\u003cul\u003e\u003cli\u003eInputUtilization\u003c/li\u003e\u003cli\u003eOutputUtilization\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ ifMIB Measurement configuration\n\u003c/p\u003e\n\u003ch3 id="22-cisco-memory-measurement"\u003e2.2 Cisco Memory Measurement\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s configure the Cisco Memory measurement. As we did on the ifMIB metrics, we need to have clear what metrics are we going to send. In our case, we are interested on send only the % usage of the Memory, so:\u003c/p\u003e\n\u003cdd\u003e🚫-Cisco_Catalyst_ciscoMemoryPoolUsed \u003c/dd\u003e\n\u003cdd\u003e🚫-Cisco_Catalyst_ciscoMemoryPoolFree \u003c/dd\u003e\n\u003cdd\u003e✅-Cisco_ciscoMemoryPool_utilization_percent \u003c/dd\u003e\n\u003cbr/\u003e\n\u003cp\u003eSo we  create the new Measurement with the following configuration:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003cth\u003eGetMode\u003c/th\u003e\n\u003cth\u003eIndex OID\u003c/th\u003e\n\u003cth\u003eTag OID\u003c/th\u003e\n\u003cth\u003eIndex Tag\u003c/th\u003e\n\u003cth\u003eIndex Tag Format\u003c/th\u003e\n\u003cth\u003eIndex as Value\u003c/th\u003e\n\u003cth\u003eMetric Fields\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eCisco_Catalyst_ciscoMemoryPool\u003c/td\u003e\n\u003ctd\u003ecisco_catalyst_ciscoMemoryPool\u003c/td\u003e\n\u003ctd\u003eindexed\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.48.1.1.1.2\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003ememIndex\u003c/td\u003e\n\u003ctd\u003e\u0026ndash;\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003e#BASICS\u003c/em\u003e:\u003cul\u003e\u003cli\u003eCisco_Catalyst_ciscoMemoryPoolUsed\u003c/li\u003e\u003cli\u003eCisco_Catalyst_ciscoMemoryPoolFree\u003c/li\u003e\u003c/ul\u003e\u003cem\u003e#EXTENDED\u003c/em\u003e:\u003cul\u003e\u003cli\u003eCisco_ciscoMemoryPool_utilization_percent\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ Cisco Memory Measurement configuration\n\u003c/p\u003e\n\u003ch3 id="23-cisco-cpu-measurement"\u003e2.3 Cisco CPU Measurement\u003c/h3\u003e\n\u003cp\u003eOur last measurement: Cisco CPU. This OID is indexed by a double index:\u003c/p\u003e\n\u003cp\u003eIn order to identify the physical entity to which these values correspond, we must poll the following MIB Object : cpmCPUTotalPhysicalIndex:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMIB Object\u003c/th\u003e\n\u003cth\u003eOID\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ecpmCPUTotalPhysicalIndex\u003c/td\u003e\n\u003ctd\u003e1.3.6.1.4.1.9.9.109.1.1.1.1.2\u003c/td\u003e\n\u003ctd\u003eReturns the index assigned on entPhysicalName\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ cpmCPUTotalPhysicalIndex MIB Object\n\u003c/p\u003e\nWith those values we can get the assigned name of each CPU Module from the following OID:\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMIB Object\u003c/th\u003e\n\u003cth\u003eOID\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eentPhysicalName\u003c/td\u003e\n\u003ctd\u003e1.3.6.1.2.1.47.1.1.1.1.7\u003c/td\u003e\n\u003ctd\u003eReturns the name of each CPU Module\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ entPhysicialName MIB Object\n\u003c/p\u003e\n\u003cp\u003eOnce we get our double indexed resolved we can configure our measurement\u0026hellip; but before that, we must check out what would happen if the CPU Module are set up with the same name? The SNMPCollector will create 2 points with the same tag/field set, so it will only send 1 value!\u003c/p\u003e\n\u003cp\u003eIn order to solve that, we can add an \u003ccode\u003eIndex Tag Format\u003c/code\u003e. The SNMP Collector generates the following vars each time it does an Indexing operation:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIndexOID\u003c/code\u003e returns \u003ccode\u003e$IDX1\u003c/code\u003e and \u003ccode\u003e$VAL1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTag OID\u003c/code\u003e returns \u003ccode\u003e$IDX2\u003c/code\u003e and \u003ccode\u003e$VAL2\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo to distinguish some CPU with the same name we must set up the \u003ccode\u003eIndex Tag Format\u003c/code\u003e with \u003ccode\u003e$VAL2 - $IDX1\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003ei.e: Tag set : \u003ccode\u003eCPU Module 1 - 8\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$VAL2 = CPU Module 1\u003c/code\u003e is the result of the entPhysicalName poll\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$IDX1 = 8\u003c/code\u003e is the index of entry table.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWith all cases checked, we can finally add our measurement:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003cth\u003eGetMode\u003c/th\u003e\n\u003cth\u003eIndex OID\u003c/th\u003e\n\u003cth\u003eTag OID\u003c/th\u003e\n\u003cth\u003eIndex Tag\u003c/th\u003e\n\u003cth\u003eIndex Tag Format\u003c/th\u003e\n\u003cth\u003eIndex as Value\u003c/th\u003e\n\u003cth\u003eMetric Fields\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eCisco_Catalyst_CiscoProcessMIB\u003c/td\u003e\n\u003ctd\u003ecisco_catalyst_ciscoProcessMib\u003c/td\u003e\n\u003ctd\u003eindexed_it\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.4.1.9.9.109.1.1.1.1.2\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.47.1.1.1.1.7\u003c/td\u003e\n\u003ctd\u003ephysIndex\u003c/td\u003e\n\u003ctd\u003e$VAL2-$IDX1\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003e#BASICS\u003c/em\u003e:\u003cul\u003e\u003cli\u003eCisco_Catalyst_cpmCPUTotal1minRev\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ Cisco CPU Measurement configuration\n\u003c/p\u003e\n\u003ch2 id="3-configure-measurement-groups"\u003e3. Configure Measurement Groups\u003c/h2\u003e\n\u003cp\u003eNow, its time to create a template for all Cisco Catalyst switches!\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClick on \u003ccode\u003eMeasurement\u003c/code\u003e Group from menu item\u003c/li\u003e\n\u003cli\u003ePress \u003ccode\u003e+New\u003c/code\u003e button or edit an existing one to access to the configuration form.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMeasurement Groups is a virtual group of measurements, it allows to have different templates in order to configure devices on a really easy way!\u003c/p\u003e\n\u003cp\u003eWe don\u0026rsquo;t have to  do any especial here, we only must to set up the ID and select the different measurement that are going to be part of our template:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eCisco_Catalyst_Template_Basic\u003c/td\u003e\n\u003ctd\u003e\u003cul\u003e\u003cli\u003eCisco_ifMIB_Basics\u003c/li\u003e\u003cli\u003eCisco_Catalyst_ciscoMemoryPool\u003c/li\u003e\u003cli\u003eCisco_Catalyst_CiscoProcessMIB \u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ Cisco_Catalyst_Template Measurement Group configuration\n\u003c/p\u003e\n\u003ch2 id="4-configure-oid-conditions"\u003e4. Configure OID Conditions\u003c/h2\u003e\n\u003cp\u003eOn this point we are now able to poll all data configured in our metrics. But lets do something more complex!\nLets filter what do we want to send, it is time to create some OIDs Conditions!\u003c/p\u003e\n\u003cp\u003eIn our example we will work with the following requirements:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e(1) We only want the interfaces with UP state\u003c/li\u003e\n\u003cli\u003e(2) We only want the physical Eth interfaces\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo the result would be translated as: we only want those that comply with the following \u003ccode\u003e(1) \u0026amp;\u0026amp; (2)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eTo do that, we need to create a total of three OID conditions, lets configure all:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClick on \u003ccode\u003eOID Condtions\u003c/code\u003e item on menu\u003c/li\u003e\n\u003cli\u003eClick \u003ccode\u003e+New\u003c/code\u003e button. The measurement form will show up.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="41-interfaces-with-up-status-condition"\u003e4.1 Interfaces with UP status condition\u003c/h3\u003e\n\u003cp\u003eThe MIB object that returns that information is the ifOperStatus\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMIB Object\u003c/th\u003e\n\u003cth\u003eOID\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eifOperStatus\u003c/td\u003e\n\u003ctd\u003e1.3.6.1.2.1.2.2.1.8\u003c/td\u003e\n\u003ctd\u003eReturn the status of the interface: \u003cdd\u003eup(1), down(2), testing(3)\u003c/dd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ ifOperStatus MIB Object\n\u003c/p\u003e\n\u003cp\u003eWe only want the up interfaces so \u003ccode\u003enumerical equal than 1\u003c/code\u003e. Let\u0026rsquo;s create a OID Condition with the following configuration:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eIs Multiple\u003c/th\u003e\n\u003cth\u003eOID\u003c/th\u003e\n\u003cth\u003eCondType\u003c/th\u003e\n\u003cth\u003eCondValue\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eifOperStatus_UP\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.2.2.1.8\u003c/td\u003e\n\u003ctd\u003eneq\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ ifOperStatus_UP OID Condition configuration\n\u003c/p\u003e\n\u003ch3 id="42-interfaces-eth-like"\u003e4.2 Interfaces ETH like\u003c/h3\u003e\n\u003cp\u003eThe MIB object that returns that information is the ifType\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMIB Object\u003c/th\u003e\n\u003cth\u003eOID\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eifType\u003c/td\u003e\n\u003ctd\u003e1.3.6.1.2.1.2.2.1.3\u003c/td\u003e\n\u003ctd\u003eThe type of interface, distinguished according to the physical/link protocol\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ ifType MIB Object\n\u003c/p\u003e\n\u003cp\u003eThe eth are \u003ccode\u003eifType = 6\u003c/code\u003e, so we need to configure a new OID Condition:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eIs Multiple\u003c/th\u003e\n\u003cth\u003eOID\u003c/th\u003e\n\u003cth\u003eCondType\u003c/th\u003e\n\u003cth\u003eCondValue\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eifType_ETH\u003c/td\u003e\n\u003ctd\u003efalse\u003c/td\u003e\n\u003ctd\u003e.1.3.6.1.2.1.2.2.1.3\u003c/td\u003e\n\u003ctd\u003eneq\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ ifType_ETH OID Condition configuration\n\u003c/p\u003e\n### 4.3 Mutiple OID Condition: UP \u0026\u0026 ETH\n\u003cp\u003eIn order to apply a multiple condition we need to activate the configuration flag \u003ccode\u003eIs Multiple\u003c/code\u003e and set the field \u003ccode\u003eOID Condition\u003c/code\u003e with the logical combination of already created ones:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eIs Multiple\u003c/th\u003e\n\u003cth\u003eOID Condition\u003c/th\u003e\n\u003cth\u003eCondType\u003c/th\u003e\n\u003cth\u003eCondValue\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003einterfaces_ETH_UP\u003c/td\u003e\n\u003ctd\u003etrue\u003c/td\u003e\n\u003ctd\u003eifOperStatus_UP \u0026amp;\u0026amp; ifType_ETH\u003c/td\u003e\n\u003ctd\u003eneq\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ interfaces_ETH_UP Multiple Condition configuration\n\u003c/p\u003e\n\u003ch2 id="5-configure-measurement-filters"\u003e5. Configure Measurement Filters\u003c/h2\u003e\n\u003cp\u003eOnce we have our OID Conditions configured, lets put them on a Measurement Filter. The measurement filter is applied on measurement with Indexed/Tag OIDs.\u003c/p\u003e\n\u003cp\u003eIn our case, we need to create the filter in our ifMIB measurement to only get those interfaces that are UP and are Ethernet like.\u003c/p\u003e\n\u003cp\u003eTo to that, lets create a Measurement Filter:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClick on \u003ccode\u003eMeasurement Filters\u003c/code\u003e menu\u003c/li\u003e\n\u003cli\u003eClick \u003ccode\u003e+New\u003c/code\u003e button. The filter form will show up.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLets fill our Measurement filter.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eMeasurements\u003c/th\u003e\n\u003cth\u003eFilter Type\u003c/th\u003e\n\u003cth\u003eOID Condition\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eCisco_ifMIB_UP_ETH\u003c/td\u003e\n\u003ctd\u003eCisco_ifMIB_Basics\u003c/td\u003e\n\u003ctd\u003eOID Condition\u003c/td\u003e\n\u003ctd\u003einterfaces_ETH_UP\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ Cisco_ifMIB_UP_ETH Measurement Filter configuration\n\u003c/p\u003e\n\u003ch2 id="6-configure-snmp-device"\u003e6. Configure SNMP Device\u003c/h2\u003e\n\u003cp\u003eLets do a check what we have done until now:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe defined our core basic metrics to get performance and port statistics of our device!\u003c/li\u003e\n\u003cli\u003eWe defined 3 different measurements with complex indexes that allows to get every entry of metric objects without overlapping!\u003c/li\u003e\n\u003cli\u003eWe defined a Basic Template that allows us to configure a new device in less than 1 minute!\u003c/li\u003e\n\u003cli\u003eWe defined 3 OID Conditions and created a filter to only get ETH and UP interfaces!\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo its time to add our device and attach our already created components:\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNote\u003c/em\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTo simplfy the following configuration, we will skip connection data fields.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eID\u003c/th\u003e\n\u003cth\u003eConnectionData\u003c/th\u003e\n\u003cth\u003eMeasurement Groups\u003c/th\u003e\n\u003cth\u003eMeasurement Filters\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003emyCisco_Catalyst\u003c/td\u003e\n\u003ctd\u003e\u0026hellip;.\u003c/td\u003e\n\u003ctd\u003eCisco_Catalyst_Template_Basic\u003c/td\u003e\n\u003ctd\u003eCisco_ifMIB_UP_ETH\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp align="center"\u003e\n  ℹ️ Cisco SNMP Device configuration\n\u003c/p\u003e\n\u003ch2 id="7-reload-configuration"\u003e7. Reload configuration\u003c/h2\u003e\n\u003cp\u003eIn order to reload configuration you must click on the menu item \u003ccode\u003eReload Config\u003c/code\u003e. Once the SNMP Collector will receive the signal and it will try to reload all configuration. During that process you won\u0026rsquo;t be able to navigate until the process is finished.\u003c/p\u003e\n\u003ch2 id="8-check-your-results"\u003e8. Check your results!\u003c/h2\u003e\n\u003cp\u003eSee what are you collecting from the Runtime component!\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eClick on \u003ccode\u003eRuntime\u003c/code\u003e menu item\u003c/li\u003e\n\u003cli\u003eFind your device and check  if its actived and connected. If not, check your connection data!\u003c/li\u003e\n\u003cli\u003eClick  on the eye icon and see what are you collecting!!!\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou must check the Metrics Info panel:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCheck that the are our 3 defined Measurements\u003c/li\u003e\n\u003cli\u003eClick on every measurement and check  the created Metrics and its value\u003c/li\u003e\n\u003cli\u003eCheck the indexes are correct and that the filters are applied correctly on our ifMIB measurement!\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:25,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/examples/examples/",title:"",description:null,content:'\u003ch2 id="examples"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://github.com/toni-moreno/snmpcollector/wiki/Example:-Configuring-Cisco-Catalyst-Switch"\u003eCisco Catalyst\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:26,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/public-templates/public-device-dashboard-templates/",title:"",description:null,content:'\u003cp\u003eFrom this page you will be able to download a definition and a dashboard from some popular devices/products.\u003c/p\u003e\n\u003ch2 id="import-instructions"\u003eImport Instructions\u003c/h2\u003e\n\u003ch3 id="snmpcollector-template"\u003eSnmpCollector Template\u003c/h3\u003e\n\u003cp\u003e1.-Download the json file and Import it, after you will see a new device with id=\u0026ldquo;localhost\u0026rdquo;\n2.- Change the ID , host , port to define your linux box device, and test connectivity with the snmp connection tool\n3.- Change the imported InfluxDB server to any of your previously defined influx servers\u003c/p\u003e\n\u003ch3 id="grafana-template"\u003eGrafana Template\u003c/h3\u003e\n\u003cp\u003e1.- Download the json file and import it. Make sure you have been created the influx datasource before.\u003c/p\u003e\n\u003ch2 id="template-list"\u003eTemplate List\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eProduct\u003c/th\u003e\n\u003cth\u003eSnmpCollector Template\u003c/th\u003e\n\u003cth\u003eGrafana Template\u003c/th\u003e\n\u003cth\u003eDetailed Description\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eLinux based Devices\u003c/td\u003e\n\u003ctd\u003e\u003ca href="https://raw.githubusercontent.com/toni-moreno/snmpcollector/gh-pages/templates/linux_based_device/snmpcollector_LINUX_BASED_DEVICE_20170712.json"\u003eLinux SnmpCollector Template\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href="https://raw.githubusercontent.com/toni-moreno/snmpcollector/gh-pages/templates/linux_based_device/Grafana_LINUX%20BASED_DEVICE-20170712.jsonhttps://raw.githubusercontent.com/toni-moreno/snmpcollector/gh-pages/templates/linux_based_device/Grafana_LINUX%20BASED_DEVICE-20170712.json"\u003eLinux Grafana Template\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eThis template will get cpu/memory/disk/fs/netio metrics from any Linux based devices with a net-snmp agent running on it, most linux based appliances will work with these templates \u003cimg src="https://github.com/toni-moreno/snmpcollector/blob/gh-pages/templates/linux_based_device/linux_based_devices_screenshot.JPG?raw=true" alt="linux"\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n'},{id:27,href:"toni-moreno.github.io/snmpcollector.org/toni-moreno.github.io/snmpcollector.org/docs/troubleshooting/troubleshooting/",title:"",description:null,content:'\u003ch1 id="review-logs"\u003eReview Logs\u003c/h1\u003e\n\u003cp\u003esnmpcollector has a complete set of log files to review all what is happening while gathering snmp data from our infrastructure. All logs are located in the same directory LOG_DIR.\u003c/p\u003e\n\u003cp\u003eDefault LOG_DIR is at \u003ccode\u003e/var/log/snmpcollector\u003c/code\u003e if snmpcollector has been installed with  debian and redhat based packages. is  at \u003ccode\u003e/opt/snmpcollector/log\u003c/code\u003e in docker and always can be set with -log option  passed to the snmpcollector binary.\u003c/p\u003e\n\u003cp\u003eIf installed with debian/redhat packages you can also tune this parameters in these files\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003erpm /etc/sysconfig/snmpcollector\u003c/li\u003e\n\u003cli\u003edeb /etc/default/snmpcollector\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="main-agent-logs"\u003eMain agent logs\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e$LOG_DIR/snmpcollector.log\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eShow basic initialisation process and the result of runtime administration from the web ui\nDefault Level: set in the main config.toml file under the general section\nSupported Levels:  panic,fatal,error,warn,info,debug\nCan be changed online?: no\u003c/p\u003e\n\u003ch3 id="http-access-logs"\u003eHTTP access logs\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e$LOG_DIR/http_access.log\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eShow us all http access request the result and response time. This log has not levelling support\u003c/p\u003e\n\u003ch3 id="device-specific-logs"\u003eDevice specific logs\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e$LOG_DIR/\u0026lt;device_id\u0026gt;.log\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis is the main log when you if you have problems with only a set of devices and only under certain conditions.\u003c/p\u003e\n\u003cp\u003eDefault Level: set in the device configuration section on the configuration database\nSupported Levels:  panic,fatal,error,warn,info,debug\nCan be changed online?: yes in the runtime webui\u003c/p\u003e\n\u003ch3 id="snmp-debug-logs"\u003eSNMP debug logs\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e$LOG_DIR/snmpdebug_\u0026lt;device_id\u0026gt;_\u0026lt;measurement_id\u0026gt;.log\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis log is disabled by default and can be enabled online on the webui , when stabilising snmp links with remote devices snmpcollector has one link by measurement. When enabling snmpdebug log each measurement on the device will create a new file with snmp protocol related debug. This debug will help us to review connection and or snmp protocol related problems.\u003c/p\u003e\n\u003ch3 id="sql-debug-log"\u003eSQL debug log\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e$LOG_DIR/sql.log\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis log is disabled by default.\u003c/p\u003e\n\u003cp\u003eDefault Level: set in the main config.toml file under the general section\nSupported Levels:  on/off ( debug = true /  debug = false)\nCan be changed online?: no\u003c/p\u003e\n\u003ch1 id="self-monitoring"\u003eSelf Monitoring\u003c/h1\u003e\n\u003cp\u003eWhen snmpcollector has self-monitoring activate it can send data from itself to the \u0026ldquo;default\u0026rdquo; backend (you should have both selfmon active and one influx backend configured with id = \u0026ldquo;default\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eYou can activate on the main config file config.toml on the [selfmon] section.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-toml"\u003e[selfmon]\n #enable true/false enable/disable self monitoring\n enabled = true\n #send data Frequency\n freq = 60\n #prefix for measurement naming\n prefix = \u0026quot;\u0026quot;\n #inherit device tags (only apply to the selfmon_device_stats measurmentes)\n inheritdevicetags = true\n #adds extra tags to the measurement config should be set as a csv - tag=value1,tag2=value2,...,tagN=valN\n extratags = [ \u0026quot;instance=snmpcollector01\u0026quot; ]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen active it will send 2 measurements.\u003c/p\u003e\n\u003ch3 id="defined-measurements"\u003edefined measurements\u003c/h3\u003e\n\u003cp\u003eThese are the defined measurements, where user can add prefix in the config.toml if needed.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003emeasurement\u003c/th\u003e\n\u003cth\u003edescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cprefix\u003eselfmon_gvm\u003c/td\u003e\n\u003ctd\u003esend statistics about the Go Virtual Machine.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cprefix\u003eselfmon_device_stats\u003c/td\u003e\n\u003ctd\u003esend statistic data form each gathering device\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cprefix\u003eselfmon_outdb_stats\u003c/td\u003e\n\u003ctd\u003estatistics measurement for each output db\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id="selfmon_gvm"\u003eselfmon_gvm\u003c/h4\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eFieldName\u003c/th\u003e\n\u003cth\u003eSource\u003c/th\u003e\n\u003cth\u003eUnit\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eruntime_goroutines\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eruntime.NumGoroutine()\u003c/td\u003e\n\u003ctd\u003enumber\u003c/td\u003e\n\u003ctd\u003eNumber of currently running goroutines\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003emem.alloc\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eruntime.ReadMemStats.Alloc\u003c/td\u003e\n\u003ctd\u003ebytes\u003c/td\u003e\n\u003ctd\u003eTotal bytes allocated\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003emem.mallocs\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eruntime.ReadMemStats.Mallocs\u003c/td\u003e\n\u003ctd\u003emallocs per second\u003c/td\u003e\n\u003ctd\u003eNumber of Mallocs issued to the system\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003emem.frees\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eruntime.ReadMemStats.Frees\u003c/td\u003e\n\u003ctd\u003efrees per second\u003c/td\u003e\n\u003ctd\u003eNumber of frees issued to the system\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003emem.heapAlloc\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eruntime.ReadMemStats.HeapAlloc\u003c/td\u003e\n\u003ctd\u003ebytes\u003c/td\u003e\n\u003ctd\u003eallocated heap objects.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003emem.stackInuse\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eruntime.ReadMemStats.StackInuse\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ebytes in stack spans.  In-use stack spans have at least one stack in them. These spans can only be used for other stacks of the same size. There is no StackIdle because unused stack spans are returned to the heap (and hence counted toward HeapIdle).\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003egc.total_pause_ns\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003ememStats.PauseTotalNs\u003c/td\u003e\n\u003ctd\u003ems\u003c/td\u003e\n\u003ctd\u003eaccumulated paused in ms\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003egc.pause_per_interval\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003ememStats.PauseTotalNs\u003c/td\u003e\n\u003ctd\u003ems/interval\u003c/td\u003e\n\u003ctd\u003eaccumulated paused in ms since last gathered statistic\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003egc.pause_per_second\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003ememStats.PauseTotalNs\u003c/td\u003e\n\u003ctd\u003ems/second\u003c/td\u003e\n\u003ctd\u003eaccumulated paused in ms per second (normalized)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003egc.gc_per_interval\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003ememStats.NumGC\u003c/td\u003e\n\u003ctd\u003e#gc/second\u003c/td\u003e\n\u003ctd\u003enumber of gc\u0026rsquo;s since last gathered statistic\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003egc.gc_per_second\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003ememStats.NumGC\u003c/td\u003e\n\u003ctd\u003e#gc/second\u003c/td\u003e\n\u003ctd\u003enumber of gc\u0026rsquo;s per second ( normalized)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id="selfmon_device_stats"\u003eselfmon_device_stats\u003c/h4\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eFieldName\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003esnmp_oid_get_all\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eAll Gathered snmp metrics ( sum of snmpget oid\u0026rsquo;s and all received oid\u0026rsquo;s in snmpwalk queries)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003esnmp_oid_get_processed\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eGathered and processed snmp metrics after filters are applied ( not always sent to the backend it depends on the report flag)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003esnmp_oid_get_errors\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003enumber of  oid with errors for all measurements\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003ecycle_gather_start_time\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eLast gathered time in unix timestamp\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003ecycle_gather_duration\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eelapsed time taken to get all measurement info in seconds\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003efilter_start_time\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eLast Applied Filter time  in unix timestamp\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003efilter_duration\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eelapsed time taken to compute all applicable filters on the device in seconds\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003ebackend_sent_start_time\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eLast sent time to the internal output buffer\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003ebackend_sent_Duration\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003eelapsed time taken to send data to the internal output buffer backend\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003emetric_sent\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003enumber of metrics sent (taken as fields) for all measurements\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003emetric_sent_errors\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003enumber of metrics  (taken as fields) with errors for all measurements\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003emeasurement_sent\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e(number of  measurements build to send as a single request sent to the backend)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003emeasurement_sent_errors\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003enumber of metrics  (taken as fields) with errors for all measurements\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id="selfmon_outdb_stats"\u003eselfmon_outdb_stats\u003c/h4\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003efield\u003c/th\u003e\n\u003cth\u003edescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003ewrite_sent\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003enumber of HTTP writes sent to the DB (each write sends a batchPoint) on the last period\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003ewrite_error\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003enumber of HTTP write errors on the period\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003epoints_sent\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003enumber of Points sent on each Write (on each BatchPoint) on the last period\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003epoints_sent_max\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003emax number of points sent on all writes on the last period\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003epoints_sent_avg\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e(only if write_sent \u0026gt; 0) averaged points sent for all writes on the last period\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003ewrite_time\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003esum of all HTTP response times on  all writes on the last period\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003ewrite_time_max\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003emax HTTP response time in all writes on the last period\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003ewrite_time_avg\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e(only if write_sent \u0026gt; 0) average response time for all writes on the last period\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003efields_sent\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003enumber of fields sent to the DB on the last period\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003efields_sent_max\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003emax number of fields sent to the DB on the last period\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003ebuffer_percent_used\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003epercent of the usage of the total buffer used for each.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eUse this \u003ca href="https://raw.githubusercontent.com/toni-moreno/snmpcollector/gh-pages/dashboards/GRAFANA_SNMPCOLLECTOR_DEVICESTATISTICS.json"\u003eGRAFANA SNMPCOLLECTOR DEVICE STATISTICS DASHBOARD\u003c/a\u003e to see your device stats and  this \u003ca href="https://raw.githubusercontent.com/toni-moreno/snmpcollector/gh-pages/dashboards/GRAFANA_SNMPCOLLECTOR_GVM.json"\u003eGRAFANA SNMPCOLLECTOR GVM STATISTICS DASHBOARD \u003c/a\u003e to see internal Golang Virtual Machine evolution\u003c/p\u003e\n'}];b.add(c),userinput.addEventListener('input',e,!0),suggestions.addEventListener('click',f,!0);function e(){var g=this.value,e=b.search(g,5),f=suggestions.childNodes,h=0,i=e.length,c;for(suggestions.classList.remove('d-none'),e.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.href,t.textContent=b.title,d.textContent=b.description,suggestions.appendChild(c)});f.length>i;)suggestions.removeChild(f[h])}function f(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()